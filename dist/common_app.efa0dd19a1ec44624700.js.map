{"version":3,"file":"common_app.efa0dd19a1ec44624700.js","mappings":";sGAUA,SAASA,IAYP,OAXAA,EAAWC,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAC1D,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GACvB,IAAK,IAAII,KAAOD,EACVP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,GAG3B,CACA,OAAOL,CACT,EACOJ,EAASa,MAAMC,KAAMR,UAC9B,CAQA,IAAIS,gIACJ,SAAWA,GAQTA,EAAY,IAAI,MAMhBA,EAAa,KAAI,OAKjBA,EAAgB,QAAI,SACrB,CApBD,CAoBGA,IAAWA,EAAS,CAAC,IACxB,MAAMC,EAAoB,WAgH1B,SAASC,EAAqBC,GAqB5B,YApBgB,IAAZA,IACFA,EAAU,CAAC,GAuJf,SAA4BC,EAAaC,EAAYC,EAAkBH,QACrD,IAAZA,IACFA,EAAU,CAAC,GAEb,IAAI,OACFI,EAASC,SAASC,YAAW,SAC7BC,GAAW,GACTP,EACAQ,EAAgBJ,EAAOK,QACvBC,EAASb,EAAOc,IAChBC,EAAW,KACXC,EAAQC,IAUZ,SAASA,IAIP,OAHYN,EAAcO,OAAS,CACjCC,IAAK,OAEMA,GACf,CACA,SAASC,IACPP,EAASb,EAAOc,IAChB,IAAIO,EAAYJ,IACZK,EAAqB,MAAbD,EAAoB,KAAOA,EAAYL,EACnDA,EAAQK,EACJN,GACFA,EAAS,CACPF,SACAU,SAAUX,EAAQW,SAClBD,SAGN,CA+CA,SAASE,EAAUC,GAIjB,IAAIC,EAAkC,SAA3BnB,EAAOgB,SAASI,OAAoBpB,EAAOgB,SAASI,OAASpB,EAAOgB,SAASK,KACpFA,EAAqB,iBAAPH,EAAkBA,EAAKI,EAAWJ,GAEpD,OADAK,EAAUJ,EAAM,sEAAwEE,GACjF,IAAIG,IAAIH,EAAMF,EACvB,CA/Ea,MAATV,IACFA,EAAQ,EACRL,EAAcqB,aAAa/C,EAAS,CAAC,EAAG0B,EAAcO,MAAO,CAC3DC,IAAKH,IACH,KA4EN,IAAIJ,EAAU,CACZ,UAAIC,GACF,OAAOA,CACT,EACA,YAAIU,GACF,OAAOnB,EAAYG,EAAQI,EAC7B,EACA,MAAAsB,CAAOC,GACL,GAAInB,EACF,MAAM,IAAIoB,MAAM,8CAIlB,OAFA5B,EAAO6B,iBAAiBnC,EAAmBmB,GAC3CL,EAAWmB,EACJ,KACL3B,EAAO8B,oBAAoBpC,EAAmBmB,GAC9CL,EAAW,IAAI,CAEnB,EACAV,WAAWoB,GACFpB,EAAWE,EAAQkB,GAE5BD,YACA,cAAAc,CAAeb,GAEb,IAAIc,EAAMf,EAAUC,GACpB,MAAO,CACLe,SAAUD,EAAIC,SACdC,OAAQF,EAAIE,OACZC,KAAMH,EAAIG,KAEd,EACAC,KAtFF,SAAclB,EAAIP,GAChBL,EAASb,EAAO4C,KAChB,IAAIrB,EAAWsB,EAAejC,EAAQW,SAAUE,EAAIP,GAChDZ,GAAkBA,EAAiBiB,EAAUE,GACjDT,EAAQC,IAAa,EACrB,IAAI6B,EAAeC,EAAgBxB,EAAUP,GACzCuB,EAAM3B,EAAQP,WAAWkB,GAE7B,IACEZ,EAAcqC,UAAUF,EAAc,GAAIP,EAC5C,CAAE,MAAOU,GAKP,GAAIA,aAAiBC,cAA+B,mBAAfD,EAAME,KACzC,MAAMF,EAIR1C,EAAOgB,SAASpC,OAAOoD,EACzB,CACI7B,GAAYK,GACdA,EAAS,CACPF,SACAU,SAAUX,EAAQW,SAClBD,MAAO,GAGb,EA0DE8B,QAzDF,SAAiB3B,EAAIP,GACnBL,EAASb,EAAOqD,QAChB,IAAI9B,EAAWsB,EAAejC,EAAQW,SAAUE,EAAIP,GAChDZ,GAAkBA,EAAiBiB,EAAUE,GACjDT,EAAQC,IACR,IAAI6B,EAAeC,EAAgBxB,EAAUP,GACzCuB,EAAM3B,EAAQP,WAAWkB,GAC7BZ,EAAcqB,aAAac,EAAc,GAAIP,GACzC7B,GAAYK,GACdA,EAAS,CACPF,SACAU,SAAUX,EAAQW,SAClBD,MAAO,GAGb,EA2CEgC,GAAGC,GACM5C,EAAc2C,GAAGC,IAG5B,OAAO3C,CACT,CAzQS4C,EAjBP,SAA+BjD,EAAQI,GACrC,IAAI,SACF6B,EAAQ,OACRC,EAAM,KACNC,GACEnC,EAAOgB,SACX,OAAOsB,EAAe,GAAI,CACxBL,WACAC,SACAC,QAGF/B,EAAcO,OAASP,EAAcO,MAAMuC,KAAO,KAAM9C,EAAcO,OAASP,EAAcO,MAAMxB,KAAO,UAC5G,IACA,SAA2Ba,EAAQkB,GACjC,MAAqB,iBAAPA,EAAkBA,EAAKI,EAAWJ,EAClD,GACoE,KAAMtB,EAC5E,CA0CA,SAAS2B,EAAU4B,EAAOC,GACxB,IAAc,IAAVD,SAAmBA,EACrB,MAAM,IAAIvB,MAAMwB,EAEpB,CACA,SAASC,EAAQC,EAAMF,GACrB,IAAKE,EAAM,CAEc,oBAAZC,SAAyBA,QAAQC,KAAKJ,GACjD,IAME,MAAM,IAAIxB,MAAMwB,EAElB,CAAE,MAAOK,GAAI,CACf,CACF,CAOA,SAASjB,EAAgBxB,EAAUP,GACjC,MAAO,CACLyC,IAAKlC,EAASL,MACdxB,IAAK6B,EAAS7B,IACdyB,IAAKH,EAET,CAIA,SAAS6B,EAAeoB,EAASxC,EAAIP,EAAOxB,GAgB1C,YAfc,IAAVwB,IACFA,EAAQ,MAEKjC,EAAS,CACtBuD,SAA6B,iBAAZyB,EAAuBA,EAAUA,EAAQzB,SAC1DC,OAAQ,GACRC,KAAM,IACS,iBAAPjB,EAAkByC,EAAUzC,GAAMA,EAAI,CAC9CP,QAKAxB,IAAK+B,GAAMA,EAAG/B,KAAOA,GA7BhByE,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAgC9C,CAIA,SAASzC,EAAW0C,GAClB,IAAI,SACF/B,EAAW,IAAG,OACdC,EAAS,GAAE,KACXC,EAAO,IACL6B,EAGJ,OAFI9B,GAAqB,MAAXA,IAAgBD,GAAiC,MAArBC,EAAO+B,OAAO,GAAa/B,EAAS,IAAMA,GAChFC,GAAiB,MAATA,IAAcF,GAA+B,MAAnBE,EAAK8B,OAAO,GAAa9B,EAAO,IAAMA,GACrEF,CACT,CAIA,SAAS0B,EAAUO,GACjB,IAAIC,EAAa,CAAC,EAClB,GAAID,EAAM,CACR,IAAIE,EAAYF,EAAKG,QAAQ,KACzBD,GAAa,IACfD,EAAWhC,KAAO+B,EAAKH,OAAOK,GAC9BF,EAAOA,EAAKH,OAAO,EAAGK,IAExB,IAAIE,EAAcJ,EAAKG,QAAQ,KAC3BC,GAAe,IACjBH,EAAWjC,OAASgC,EAAKH,OAAOO,GAChCJ,EAAOA,EAAKH,OAAO,EAAGO,IAEpBJ,IACFC,EAAWlC,SAAWiC,EAE1B,CACA,OAAOC,CACT,CAyIA,IAAII,GACJ,SAAWA,GACTA,EAAiB,KAAI,OACrBA,EAAqB,SAAI,WACzBA,EAAqB,SAAI,WACzBA,EAAkB,MAAI,OACvB,CALD,CAKGA,IAAeA,EAAa,CAAC,IAChC,MAAMC,EAAqB,IAAIC,IAAI,CAAC,OAAQ,gBAAiB,OAAQ,KAAM,QAAS,aAMpF,SAASC,EAA0BC,EAAQC,EAAoBC,EAAYC,GAOzE,YANmB,IAAfD,IACFA,EAAa,SAEE,IAAbC,IACFA,EAAW,CAAC,GAEPH,EAAOI,KAAI,CAACC,EAAOvE,KACxB,IAAIwE,EAAW,IAAIJ,EAAYpE,GAC3ByE,EAAyB,iBAAbF,EAAME,GAAkBF,EAAME,GAAKD,EAASE,KAAK,KAGjE,GAFA5D,GAA0B,IAAhByD,EAAMvE,QAAmBuE,EAAMI,SAAU,6CACnD7D,GAAWuD,EAASI,GAAK,qCAAwCA,EAAxC,qEAhB7B,SAAsBF,GACpB,OAAuB,IAAhBA,EAAMvE,KACf,CAeQ4E,CAAaL,GAAQ,CACvB,IAAIM,EAAa5G,EAAS,CAAC,EAAGsG,EAAOJ,EAAmBI,GAAQ,CAC9DE,OAGF,OADAJ,EAASI,GAAMI,EACRA,CACT,CAAO,CACL,IAAIC,EAAoB7G,EAAS,CAAC,EAAGsG,EAAOJ,EAAmBI,GAAQ,CACrEE,KACAE,cAAUI,IAMZ,OAJAV,EAASI,GAAMK,EACXP,EAAMI,WACRG,EAAkBH,SAAWV,EAA0BM,EAAMI,SAAUR,EAAoBK,EAAUH,IAEhGS,CACT,IAEJ,CAMA,SAASE,EAAYd,EAAQe,EAAaC,QACvB,IAAbA,IACFA,EAAW,KAEb,IACI1D,EAAW2D,GADuB,iBAAhBF,EAA2B/B,EAAU+B,GAAeA,GACpCzD,UAAY,IAAK0D,GACvD,GAAgB,MAAZ1D,EACF,OAAO,KAET,IAAI4D,EAAWC,EAAcnB,IAoH/B,SAA2BkB,GACzBA,EAASE,MAAK,CAACC,EAAGC,IAAMD,EAAEE,QAAUD,EAAEC,MAAQD,EAAEC,MAAQF,EAAEE,MAqB5D,SAAwBF,EAAGC,GAEzB,OADeD,EAAE/G,SAAWgH,EAAEhH,QAAU+G,EAAEG,MAAM,GAAI,GAAGC,OAAM,CAACpD,EAAGjE,IAAMiE,IAAMiD,EAAElH,KAM/EiH,EAAEA,EAAE/G,OAAS,GAAKgH,EAAEA,EAAEhH,OAAS,GAG/B,CACF,CA/BIoH,CAAeL,EAAEM,WAAWvB,KAAIwB,GAAQA,EAAKC,gBAAgBP,EAAEK,WAAWvB,KAAIwB,GAAQA,EAAKC,kBAC/F,CAtHEC,CAAkBZ,GAClB,IAAIa,EAAU,KACd,IAAK,IAAI3H,EAAI,EAAc,MAAX2H,GAAmB3H,EAAI8G,EAAS5G,SAAUF,EACxD2H,EAAUC,EAAiBd,EAAS9G,GAOpC6H,EAAgB3E,IAElB,OAAOyE,CACT,CACA,SAASZ,EAAcnB,EAAQkB,EAAUgB,EAAahC,QACnC,IAAbgB,IACFA,EAAW,SAEO,IAAhBgB,IACFA,EAAc,SAEG,IAAfhC,IACFA,EAAa,IAEf,IAAIiC,EAAe,CAAC9B,EAAOvE,EAAOsG,KAChC,IAAIR,EAAO,CACTQ,kBAA+BvB,IAAjBuB,EAA6B/B,EAAMd,MAAQ,GAAK6C,EAC9DC,eAAuC,IAAxBhC,EAAMgC,cACrBR,cAAe/F,EACfuE,SAEEuB,EAAKQ,aAAaE,WAAW,OAC/B1F,EAAUgF,EAAKQ,aAAaE,WAAWpC,GAAa,wBAA2B0B,EAAKQ,aAAhC,wBAAiFlC,EAAjF,4GACpD0B,EAAKQ,aAAeR,EAAKQ,aAAaZ,MAAMtB,EAAW5F,SAEzD,IAAIiF,EAAOgD,EAAU,CAACrC,EAAY0B,EAAKQ,eACnCT,EAAaO,EAAYM,OAAOZ,GAIhCvB,EAAMI,UAAYJ,EAAMI,SAASnG,OAAS,IAC5CsC,GAGgB,IAAhByD,EAAMvE,MAAgB,4FAAqGyD,EAAO,MAClI4B,EAAcd,EAAMI,SAAUS,EAAUS,EAAYpC,KAIpC,MAAdc,EAAMd,MAAiBc,EAAMvE,QAGjCoF,EAASzD,KAAK,CACZ8B,OACAgC,MAAOkB,EAAalD,EAAMc,EAAMvE,OAChC6F,cACA,EAaJ,OAXA3B,EAAO0C,SAAQ,CAACrC,EAAOvE,KACrB,IAAI6G,EAEJ,GAAmB,KAAftC,EAAMd,MAA+C,OAA7BoD,EAActC,EAAMd,OAAiBoD,EAAYC,SAAS,KAGpF,IAAK,IAAIC,KAAYC,EAAwBzC,EAAMd,MACjD4C,EAAa9B,EAAOvE,EAAO+G,QAH7BV,EAAa9B,EAAOvE,EAKtB,IAEKoF,CACT,CAeA,SAAS4B,EAAwBvD,GAC/B,IAAIwD,EAAWxD,EAAKyD,MAAM,KAC1B,GAAwB,IAApBD,EAASzI,OAAc,MAAO,GAClC,IAAK2I,KAAUC,GAAQH,EAEnBI,EAAaF,EAAMG,SAAS,KAE5BC,EAAWJ,EAAM/E,QAAQ,MAAO,IACpC,GAAoB,IAAhBgF,EAAK5I,OAGP,OAAO6I,EAAa,CAACE,EAAU,IAAM,CAACA,GAExC,IAAIC,EAAeR,EAAwBI,EAAK1C,KAAK,MACjD+C,EAAS,GAcb,OANAA,EAAO9F,QAAQ6F,EAAalD,KAAIoD,GAAuB,KAAZA,EAAiBH,EAAW,CAACA,EAAUG,GAAShD,KAAK,QAE5F2C,GACFI,EAAO9F,QAAQ6F,GAGVC,EAAOnD,KAAIyC,GAAYtD,EAAK+C,WAAW,MAAqB,KAAbO,EAAkB,IAAMA,GAChF,CAKA,MAAMY,EAAU,SACVC,EAAsB,EACtBC,EAAkB,EAClBC,EAAoB,EACpBC,EAAqB,GACrBC,GAAgB,EAChBC,EAAUC,GAAW,MAANA,EACrB,SAASvB,EAAalD,EAAMzD,GAC1B,IAAIiH,EAAWxD,EAAKyD,MAAM,KACtBiB,EAAelB,EAASzI,OAO5B,OANIyI,EAASmB,KAAKH,KAChBE,GAAgBH,GAEdhI,IACFmI,GAAgBN,GAEXZ,EAASoB,QAAOH,IAAMD,EAAQC,KAAII,QAAO,CAAC7C,EAAO8C,IAAY9C,GAASkC,EAAQa,KAAKD,GAAWX,EAAkC,KAAZW,EAAiBT,EAAoBC,IAAqBI,EACvL,CAaA,SAASjC,EAAiBuC,EAAQjH,GAChC,IAAI,WACFqE,GACE4C,EACAC,EAAgB,CAAC,EACjBC,EAAkB,IAClB1C,EAAU,GACd,IAAK,IAAI3H,EAAI,EAAGA,EAAIuH,EAAWrH,SAAUF,EAAG,CAC1C,IAAIwH,EAAOD,EAAWvH,GAClBsK,EAAMtK,IAAMuH,EAAWrH,OAAS,EAChCqK,EAAwC,MAApBF,EAA0BnH,EAAWA,EAASkE,MAAMiD,EAAgBnK,SAAW,IACnGsK,EAAQC,EAAU,CACpBtF,KAAMqC,EAAKQ,aACXC,cAAeT,EAAKS,cACpBqC,OACCC,GACH,IAAKC,EAAO,OAAO,KACnB5K,OAAOC,OAAOuK,EAAeI,EAAME,QACnC,IAAIzE,EAAQuB,EAAKvB,MACjB0B,EAAQtE,KAAK,CAEXqH,OAAQN,EACRlH,SAAUiF,EAAU,CAACkC,EAAiBG,EAAMtH,WAC5CyH,aAAcC,EAAkBzC,EAAU,CAACkC,EAAiBG,EAAMG,gBAClE1E,UAEyB,MAAvBuE,EAAMG,eACRN,EAAkBlC,EAAU,CAACkC,EAAiBG,EAAMG,eAExD,CACA,OAAOhD,CACT,CA8CA,SAAS8C,EAAUI,EAAS3H,GACH,iBAAZ2H,IACTA,EAAU,CACR1F,KAAM0F,EACN5C,eAAe,EACfqC,KAAK,IAGT,IAAKQ,EAASC,GAuBhB,SAAqB5F,EAAM8C,EAAeqC,QAClB,IAAlBrC,IACFA,GAAgB,QAEN,IAARqC,IACFA,GAAM,GAERhG,EAAiB,MAATa,IAAiBA,EAAK6D,SAAS,MAAQ7D,EAAK6D,SAAS,MAAO,eAAkB7D,EAAlB,oCAAuEA,EAAKrB,QAAQ,MAAO,MAA3F,qIAAwPqB,EAAKrB,QAAQ,MAAO,MAAQ,MACxV,IAAIiH,EAAa,GACbC,EAAe,IAAM7F,EAAKrB,QAAQ,UAAW,IAChDA,QAAQ,OAAQ,KAChBA,QAAQ,sBAAuB,QAC/BA,QAAQ,aAAa,CAACmH,EAAGC,KACxBH,EAAW1H,KAAK6H,GACT,gBAoBT,OAlBI/F,EAAK6D,SAAS,MAChB+B,EAAW1H,KAAK,KAChB2H,GAAyB,MAAT7F,GAAyB,OAATA,EAAgB,QAC9C,qBACOmF,EAETU,GAAgB,QACE,KAAT7F,GAAwB,MAATA,IAQxB6F,GAAgB,iBAGX,CADO,IAAIG,OAAOH,EAAc/C,OAAgBxB,EAAY,KAClDsE,EACnB,CA1D8BK,CAAYP,EAAQ1F,KAAM0F,EAAQ5C,cAAe4C,EAAQP,KACjFE,EAAQtH,EAASsH,MAAMM,GAC3B,IAAKN,EAAO,OAAO,KACnB,IAAIH,EAAkBG,EAAM,GACxBG,EAAeN,EAAgBvG,QAAQ,UAAW,MAClDuH,EAAgBb,EAAMpD,MAAM,GAWhC,MAAO,CACLsD,OAXWK,EAAWf,QAAO,CAACsB,EAAMJ,EAAWxJ,KAG/C,GAAkB,MAAdwJ,EAAmB,CACrB,IAAIK,EAAaF,EAAc3J,IAAU,GACzCiJ,EAAeN,EAAgBjD,MAAM,EAAGiD,EAAgBnK,OAASqL,EAAWrL,QAAQ4D,QAAQ,UAAW,KACzG,CAEA,OADAwH,EAAKJ,GAsDT,SAAkC9G,EAAO8G,GACvC,IACE,OAAOM,mBAAmBpH,EAC5B,CAAE,MAAOT,GAEP,OADAW,GAAQ,EAAO,gCAAmC4G,EAAnC,6CAAsG9G,EAAtG,iFAAyMT,EAAQ,MACzNS,CACT,CACF,CA7DsBqH,CAAyBJ,EAAc3J,IAAU,GAAIwJ,GAChEI,CAAI,GACV,CAAC,GAGFpI,SAAUmH,EACVM,eACAE,UAEJ,CAqCA,SAAShD,EAAgBzD,GACvB,IACE,OAAOsH,UAAUtH,EACnB,CAAE,MAAOT,GAEP,OADAW,GAAQ,EAAO,iBAAoBF,EAApB,oHAA8JT,EAAQ,MAC9KS,CACT,CACF,CAYA,SAASyC,EAAc3D,EAAU0D,GAC/B,GAAiB,MAAbA,EAAkB,OAAO1D,EAC7B,IAAKA,EAASyI,cAAczD,WAAWtB,EAAS+E,eAC9C,OAAO,KAIT,IAAIC,EAAahF,EAASoC,SAAS,KAAOpC,EAAS1G,OAAS,EAAI0G,EAAS1G,OACrE2L,EAAW3I,EAASgC,OAAO0G,GAC/B,OAAIC,GAAyB,MAAbA,EAEP,KAEF3I,EAASkE,MAAMwE,IAAe,GACvC,CAmCA,SAASE,EAAoBC,EAAMC,EAAOC,EAAM9G,GAC9C,MAAO,qBAAuB4G,EAAvB,2CAAiFC,EAAQ,YAAcE,KAAKC,UAAUhH,GAAtH,yCAAgL8G,EAAhL,2HACT,CAwBA,SAASG,EAA2BzE,GAClC,OAAOA,EAAQoC,QAAO,CAACS,EAAO9I,IAAoB,IAAVA,GAAe8I,EAAMvE,MAAMd,MAAQqF,EAAMvE,MAAMd,KAAKjF,OAAS,GACvG,CAIA,SAASmM,EAAUC,EAAOC,EAAgBC,EAAkBC,GAI1D,IAAItK,OAHmB,IAAnBsK,IACFA,GAAiB,GAGE,iBAAVH,EACTnK,EAAKyC,EAAU0H,IAEfnK,EAAKxC,EAAS,CAAC,EAAG2M,GAClB9J,GAAWL,EAAGe,WAAaf,EAAGe,SAASsF,SAAS,KAAMsD,EAAoB,IAAK,WAAY,SAAU3J,IACrGK,GAAWL,EAAGe,WAAaf,EAAGe,SAASsF,SAAS,KAAMsD,EAAoB,IAAK,WAAY,OAAQ3J,IACnGK,GAAWL,EAAGgB,SAAWhB,EAAGgB,OAAOqF,SAAS,KAAMsD,EAAoB,IAAK,SAAU,OAAQ3J,KAE/F,IAEIuK,EAFAC,EAAwB,KAAVL,GAAgC,KAAhBnK,EAAGe,SACjC0J,EAAaD,EAAc,IAAMxK,EAAGe,SAWxC,GAAIuJ,GAAgC,MAAdG,EACpBF,EAAOF,MACF,CACL,IAAIK,EAAqBN,EAAerM,OAAS,EACjD,GAAI0M,EAAW1E,WAAW,MAAO,CAC/B,IAAI4E,EAAaF,EAAWhE,MAAM,KAIlC,KAAyB,OAAlBkE,EAAW,IAChBA,EAAWC,QACXF,GAAsB,EAExB1K,EAAGe,SAAW4J,EAAW1G,KAAK,IAChC,CAGAsG,EAAOG,GAAsB,EAAIN,EAAeM,GAAsB,GACxE,CACA,IAAI1H,EAzGN,SAAqBhD,EAAI6K,QACF,IAAjBA,IACFA,EAAe,KAEjB,IACE9J,SAAU0J,EAAU,OACpBzJ,EAAS,GAAE,KACXC,EAAO,IACS,iBAAPjB,EAAkByC,EAAUzC,GAAMA,EACzCe,EAAW0J,EAAaA,EAAW1E,WAAW,KAAO0E,EAO3D,SAAyB5E,EAAcgF,GACrC,IAAIrE,EAAWqE,EAAalJ,QAAQ,OAAQ,IAAI8E,MAAM,KAUtD,OATuBZ,EAAaY,MAAM,KACzBN,SAAQ2B,IACP,OAAZA,EAEEtB,EAASzI,OAAS,GAAGyI,EAASsE,MACb,MAAZhD,GACTtB,EAAStF,KAAK4G,EAChB,IAEKtB,EAASzI,OAAS,EAAIyI,EAASvC,KAAK,KAAO,GACpD,CAnBwE8G,CAAgBN,EAAYI,GAAgBA,EAClH,MAAO,CACL9J,WACAC,OAAQgK,EAAgBhK,GACxBC,KAAMgK,EAAchK,GAExB,CA0FaiK,CAAYlL,EAAIuK,GAEvBY,EAA2BV,GAA6B,MAAfA,GAAsBA,EAAW5D,SAAS,KAEnFuE,GAA2BZ,GAA8B,MAAfC,IAAuBJ,EAAiBxD,SAAS,KAI/F,OAHK7D,EAAKjC,SAAS8F,SAAS,OAASsE,IAA4BC,IAC/DpI,EAAKjC,UAAY,KAEZiC,CACT,CAWA,MAAMgD,EAAYqF,GAASA,EAAMpH,KAAK,KAAKtC,QAAQ,SAAU,KAIvD8G,EAAoB1H,GAAYA,EAASY,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,KAI7EqJ,EAAkBhK,GAAWA,GAAqB,MAAXA,EAAsBA,EAAO+E,WAAW,KAAO/E,EAAS,IAAMA,EAA7C,GAIxDiK,EAAgBhK,GAASA,GAAiB,MAATA,EAAoBA,EAAK8E,WAAW,KAAO9E,EAAO,IAAMA,EAAzC,GAoBnBP,MA2KnC,MAAM4K,EACJ,WAAAC,CAAYC,EAAQC,EAAYC,EAAMC,QACnB,IAAbA,IACFA,GAAW,GAEbrN,KAAKkN,OAASA,EACdlN,KAAKmN,WAAaA,GAAc,GAChCnN,KAAKqN,SAAWA,EACZD,aAAgBhL,OAClBpC,KAAKoN,KAAOA,EAAK9I,WACjBtE,KAAKkD,MAAQkK,GAEbpN,KAAKoN,KAAOA,CAEhB,EAMF,SAASE,EAAqBpK,GAC5B,OAAgB,MAATA,GAAyC,iBAAjBA,EAAMgK,QAAmD,iBAArBhK,EAAMiK,YAAqD,kBAAnBjK,EAAMmK,UAA0B,SAAUnK,CACvJ,CAEA,MAAMqK,EAA0B,CAAC,OAAQ,MAAO,QAAS,UACnDC,EAAuB,IAAIvI,IAAIsI,GAC/BE,EAAyB,CAAC,SAAUF,GACpCG,EAAsB,IAAIzI,IAAIwI,GAC9BE,EAAsB,IAAI1I,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MACnD2I,EAAoC,IAAI3I,IAAI,CAAC,IAAK,MAClD4I,EAAkB,CACtB1M,MAAO,OACPK,cAAUwE,EACV8H,gBAAY9H,EACZ+H,gBAAY/H,EACZgI,iBAAahI,EACbiI,cAAUjI,EACVkI,UAAMlI,EACNmI,UAAMnI,GAEFoI,EAAe,CACnBjN,MAAO,OACPiM,UAAMpH,EACN8H,gBAAY9H,EACZ+H,gBAAY/H,EACZgI,iBAAahI,EACbiI,cAAUjI,EACVkI,UAAMlI,EACNmI,UAAMnI,GAEFqI,EAAe,CACnBlN,MAAO,YACPmN,aAAStI,EACTuI,WAAOvI,EACPxE,cAAUwE,GAENwI,EAAqB,gCACrBC,EAA4BjJ,IAAS,CACzCkJ,iBAAkBC,QAAQnJ,EAAMkJ,oBASlC,SAASE,EAAaC,GACpB,MAAMC,EAAeD,EAAKrO,OAASqO,EAAKrO,OAA2B,oBAAXA,OAAyBA,YAASwF,EACpF+I,OAAoC,IAAjBD,QAAiE,IAA1BA,EAAarO,eAA2E,IAAxCqO,EAAarO,SAASuO,cAChIC,GAAYF,EAElB,IAAI3J,EACJ,GAFArD,EAAU8M,EAAK1J,OAAO1F,OAAS,EAAG,6DAE9BoP,EAAKzJ,mBACPA,EAAqByJ,EAAKzJ,wBACrB,GAAIyJ,EAAKK,oBAAqB,CAEnC,IAAIA,EAAsBL,EAAKK,oBAC/B9J,EAAqBI,IAAS,CAC5BkJ,iBAAkBQ,EAAoB1J,IAE1C,MACEJ,EAAqBqJ,EAGvB,IAGIU,EAHA7J,EAAW,CAAC,EAEZ8J,EAAalK,EAA0B2J,EAAK1J,OAAQC,OAAoBY,EAAWV,GAEnFa,EAAW0I,EAAK1I,UAAY,IAE5BkJ,EAASnQ,EAAS,CACpBoQ,wBAAwB,EACxBC,oBAAoB,GACnBV,EAAKQ,QAEJG,EAAkB,KAElBC,EAAc,IAAIxK,IAElByK,EAAuB,KAEvBC,EAA0B,KAE1BC,EAAoB,KAOpBC,EAA8C,MAAtBhB,EAAKiB,cAC7BC,EAAiB9J,EAAYmJ,EAAYP,EAAKhO,QAAQW,SAAU2E,GAChE6J,EAAgB,KACpB,GAAsB,MAAlBD,EAAwB,CAG1B,IAAI7M,EAAQ+M,GAAuB,IAAK,CACtCxN,SAAUoM,EAAKhO,QAAQW,SAASiB,YAE9B,QACFyE,EAAO,MACP1B,GACE0K,GAAuBd,GAC3BW,EAAiB7I,EACjB8I,EAAgB,CACd,CAACxK,EAAME,IAAKxC,EAEhB,CACA,IAMIiN,EAwBAC,EA9BAC,IAGHN,EAAe1G,MAAKiH,GAAKA,EAAE9K,MAAM+K,QAEjCR,EAAe1G,MAAKiH,GAAKA,EAAE9K,MAAMgL,UAAiC,MAAtB3B,EAAKiB,eAE9C3O,EAAQ,CACVsP,cAAe5B,EAAKhO,QAAQC,OAC5BU,SAAUqN,EAAKhO,QAAQW,SACvB0F,QAAS6I,EACTM,cACAK,WAAY7C,EAEZ8C,sBAA6C,MAAtB9B,EAAKiB,eAAgC,KAC5Dc,oBAAoB,EACpBC,aAAc,OACdC,WAAYjC,EAAKiB,eAAiBjB,EAAKiB,cAAcgB,YAAc,CAAC,EACpEC,WAAYlC,EAAKiB,eAAiBjB,EAAKiB,cAAciB,YAAc,KACnEC,OAAQnC,EAAKiB,eAAiBjB,EAAKiB,cAAckB,QAAUhB,EAC3DiB,SAAU,IAAIC,IACdC,SAAU,IAAID,KAIZE,EAAgBnR,EAAOc,IAGvBsQ,GAA4B,EAK5BC,GAA8B,EAK9BC,GAAyB,EAGzBC,EAA0B,GAG1BC,EAAwB,GAExBC,EAAmB,IAAIR,IAEvBS,EAAqB,EAIrBC,GAA2B,EAE3BC,EAAiB,IAAIX,IAErBY,EAAmB,IAAI7M,IAEvB8M,EAAmB,IAAIb,IAKvBc,EAAkB,IAAId,IAGtBe,EAAmB,IAAIf,IAGvBgB,GAA0B,EAiF9B,SAASC,GAAYC,GACnBjR,EAAQjC,EAAS,CAAC,EAAGiC,EAAOiR,GAC5B3C,EAAY5H,SAAQwK,GAAcA,EAAWlR,IAC/C,CAMA,SAASmR,GAAmB9Q,EAAU4Q,GACpC,IAAIG,EAAiBC,EAMrB,IACIzB,EADA0B,EAAqC,MAApBtR,EAAM4P,YAAqD,MAA/B5P,EAAMuP,WAAW5C,YAAsB4E,GAAiBvR,EAAMuP,WAAW5C,aAA0C,YAA3B3M,EAAMuP,WAAWvP,QAA+G,KAAjD,OAArCoR,EAAkB/Q,EAASL,YAAiB,EAASoR,EAAgBI,aAIpP5B,EAFAqB,EAASrB,WACP5R,OAAOyT,KAAKR,EAASrB,YAAYtR,OAAS,EAC/B2S,EAASrB,WAGT,KAEN0B,EAEItR,EAAM4P,WAGN,KAGf,IAAID,EAAasB,EAAStB,WAAa+B,GAAgB1R,EAAM2P,WAAYsB,EAAStB,WAAYsB,EAASlL,SAAW,GAAIkL,EAASpB,QAAU7P,EAAM2P,WAG3IK,EAAWhQ,EAAMgQ,SACjBA,EAAS2B,KAAO,IAClB3B,EAAW,IAAID,IAAIC,GACnBA,EAAStJ,SAAQ,CAAC2C,EAAGuI,IAAM5B,EAAS6B,IAAID,EAAG1E,MAI7C,IAAIuC,GAAmD,IAA9BS,GAAqE,MAA/BlQ,EAAMuP,WAAW5C,YAAsB4E,GAAiBvR,EAAMuP,WAAW5C,cAAyG,KAAlD,OAAtC0E,EAAmBhR,EAASL,YAAiB,EAASqR,EAAiBG,aAC5NxD,IACFC,EAAaD,EACbA,OAAqBnJ,GAEnBsL,GAAwCF,IAAkBnR,EAAOc,MAAgBqQ,IAAkBnR,EAAO4C,KAC5GgM,EAAKhO,QAAQ+B,KAAKpB,EAAUA,EAASL,OAC5BiQ,IAAkBnR,EAAOqD,SAClCuL,EAAKhO,QAAQwC,QAAQ7B,EAAUA,EAASL,QAE1CgR,GAAYjT,EAAS,CAAC,EAAGkT,EAAU,CACjCrB,aACAD,aACAL,cAAeW,EACf5P,WACA6O,aAAa,EACbK,WAAY7C,EACZgD,aAAc,OACdF,sBAAuBsC,GAAuBzR,EAAU4Q,EAASlL,SAAW/F,EAAM+F,SAClF0J,qBACAO,cAGFC,EAAgBnR,EAAOc,IACvBsQ,GAA4B,EAC5BC,GAA8B,EAC9BC,GAAyB,EACzBC,EAA0B,GAC1BC,EAAwB,EAC1B,CAyGAyB,eAAeC,GAAgB1C,EAAejP,EAAU4R,GAItDhD,GAA+BA,EAA4BiD,QAC3DjD,EAA8B,KAC9BgB,EAAgBX,EAChBa,GAAgF,KAAjD8B,GAAQA,EAAKE,gCAq2B9C,SAA4B9R,EAAU0F,GACpC,GAAIwI,GAAwBE,EAAmB,CAC7C,IAAIjQ,EAAM4T,GAAa/R,EAAU0F,GACjCwI,EAAqB/P,GAAOiQ,GAC9B,CACF,CAv2BE4D,CAAmBrS,EAAMK,SAAUL,EAAM+F,SACzCmK,GAAkE,KAArC+B,GAAQA,EAAKxC,oBAC1C,IAAI6C,EAActE,GAAsBC,EACpCsE,EAAoBN,GAAQA,EAAKO,mBACjCzM,EAAUjB,EAAYwN,EAAajS,EAAU2E,GAEjD,IAAKe,EAAS,CACZ,IAAIhE,EAAQ+M,GAAuB,IAAK,CACtCxN,SAAUjB,EAASiB,YAGnByE,QAAS0M,EAAe,MACxBpO,GACE0K,GAAuBuD,GAU3B,OARAI,UACAvB,GAAmB9Q,EAAU,CAC3B0F,QAAS0M,EACT9C,WAAY,CAAC,EACbE,OAAQ,CACN,CAACxL,EAAME,IAAKxC,IAIlB,CAOA,GAAI/B,EAAMkP,cAAgBkB,IA+gEJ/K,EA/gE+CrF,EAAMK,SA+gElDiF,EA/gE4DjF,EAghEnFgF,EAAE/D,WAAagE,EAAEhE,UAAY+D,EAAE9D,SAAW+D,EAAE/D,SAGjC,KAAX8D,EAAE7D,KAEc,KAAX8D,EAAE9D,KACA6D,EAAE7D,OAAS8D,EAAE9D,MAGF,KAAX8D,EAAE9D,UAzhEyFyQ,GAAQA,EAAKU,YAAcpB,GAAiBU,EAAKU,WAAWhG,aAI9J,YAHAwE,GAAmB9Q,EAAU,CAC3B0F,YA6gER,IAA0BV,EAAGC,EAxgEzB2J,EAA8B,IAAI2D,gBAClC,IACIC,EACAC,EAFAC,EAAUC,GAAwBtF,EAAKhO,QAASW,EAAU4O,EAA4BgE,OAAQhB,GAAQA,EAAKU,YAG/G,GAAIV,GAAQA,EAAKa,aAKfA,EAAe,CACb,CAACI,GAAoBnN,GAAS1B,MAAME,IAAK0N,EAAKa,mBAE3C,GAAIb,GAAQA,EAAKU,YAAcpB,GAAiBU,EAAKU,WAAWhG,YAAa,CAElF,IAAIwG,QAsCRpB,eAA4BgB,EAAS1S,EAAUsS,EAAY5M,EAASkM,QACrD,IAATA,IACFA,EAAO,CAAC,GAEVmB,KAEA,IAKI7L,EALAgI,EAwpER,SAAiClP,EAAUsS,GAWzC,MAViB,CACf3S,MAAO,aACPK,WACAsM,WAAYgG,EAAWhG,WACvBC,WAAY+F,EAAW/F,WACvBC,YAAa8F,EAAW9F,YACxBC,SAAU6F,EAAW7F,SACrBC,KAAM4F,EAAW5F,KACjBC,KAAM2F,EAAW3F,KAGrB,CApqEqBqG,CAAwBhT,EAAUsS,GACnD3B,GAAY,CACVzB,eAIF,IAAI+D,EAAcC,GAAexN,EAAS1F,GAC1C,GAAKiT,EAAYjP,MAAM1E,QAAW2T,EAAYjP,MAAM+K,MAWlD,GADA7H,QAAeiM,GAAmB,SAAUT,EAASO,EAAavN,EAAS5B,EAAUF,EAAoBe,GACrG+N,EAAQE,OAAOQ,QACjB,MAAO,CACLC,gBAAgB,QAZpBnM,EAAS,CACPoM,KAAM/P,EAAW7B,MACjBA,MAAO+M,GAAuB,IAAK,CACjC8E,OAAQb,EAAQa,OAChBtS,SAAUjB,EAASiB,SACnBuS,QAASP,EAAYjP,MAAME,MAWjC,GAAIuP,GAAiBvM,GAAS,CAC5B,IAAIrF,EAaJ,OAXEA,EADE+P,GAAwB,MAAhBA,EAAK/P,QACL+P,EAAK/P,QAKLqF,EAAOlH,WAAaL,EAAMK,SAASiB,SAAWtB,EAAMK,SAASkB,aAEnEwS,GAAwB/T,EAAOuH,EAAQ,CAC3CoL,aACAzQ,YAEK,CACLwR,gBAAgB,EAEpB,CACA,GAAIM,GAAczM,GAAS,CAGzB,IAAI0M,EAAgBf,GAAoBnN,EAASuN,EAAYjP,MAAME,IAQnE,OAH+B,KAA1B0N,GAAQA,EAAK/P,WAChB+N,EAAgBnR,EAAO4C,MAElB,CAELmR,kBAAmB,CAAC,EACpBqB,mBAAoB,CAClB,CAACD,EAAc5P,MAAME,IAAKgD,EAAOxF,OAGvC,CACA,GAAIoS,GAAiB5M,GACnB,MAAMuH,GAAuB,IAAK,CAChC6E,KAAM,iBAGV,MAAO,CACLd,kBAAmB,CACjB,CAACS,EAAYjP,MAAME,IAAKgD,EAAO0E,MAGrC,CAnH6BmI,CAAarB,EAAS1S,EAAU4R,EAAKU,WAAY5M,EAAS,CACjF7D,QAAS+P,EAAK/P,UAEhB,GAAIiR,EAAaO,eACf,OAEFb,EAAoBM,EAAaN,kBACjCC,EAAeK,EAAae,mBAC5B3B,EAAoB8B,GAAqBhU,EAAU4R,EAAKU,YAExDI,EAAU,IAAIuB,QAAQvB,EAAQ1R,IAAK,CACjC4R,OAAQF,EAAQE,QAEpB,CAEA,IAAI,eACFS,EAAc,WACd/D,EAAU,OACVE,SAoGJkC,eAA6BgB,EAAS1S,EAAU0F,EAASyM,EAAoBG,EAAY4B,EAAmBrS,EAAS2Q,EAAmBC,GAEtI,IAAIP,EAAoBC,GAAsB6B,GAAqBhU,EAAUsS,GAGzE6B,EAAmB7B,GAAc4B,GAAqBE,GAA4BlC,GAClFD,EAActE,GAAsBC,GACnCyG,EAAeC,GAAwBC,GAAiBlH,EAAKhO,QAASM,EAAO+F,EAASyO,EAAkBnU,EAAU+P,EAAwBC,EAAyBC,EAAuBM,EAAkBD,EAAkB2B,EAAatN,EAAU6N,EAAmBC,GAO7Q,GAHAJ,IAAsBmB,KAAa9N,GAAWA,EAAQmC,MAAKiH,GAAKA,EAAE9K,MAAME,KAAOsP,MAAaa,GAAiBA,EAAcxM,MAAKiH,GAAKA,EAAE9K,MAAME,KAAOsP,MACpJpD,IAA4BD,EAEC,IAAzBkE,EAAcpW,QAAgD,IAAhCqW,EAAqBrW,OAAc,CACnE,IAAIuW,EAAkBC,KAWtB,OAVA3D,GAAmB9Q,EAAUtC,EAAS,CACpCgI,UACA4J,WAAY,CAAC,EAEbE,OAAQiD,GAAgB,MACvBD,EAAoB,CACrBjD,WAAYiD,GACV,CAAC,EAAGgC,EAAkB,CACxB/E,SAAU,IAAIC,IAAI/P,EAAM8P,WACtB,CAAC,IACE,CACL4D,gBAAgB,EAEpB,CAKA,IAAKvD,EAA6B,CAChCwE,EAAqBjO,SAAQqO,IAC3B,IAAIC,EAAUhV,EAAM8P,SAASmF,IAAIF,EAAGvW,KAChC0W,EAAsBC,QAAkBtQ,EAAWmQ,EAAUA,EAAQ/I,UAAOpH,GAChF7E,EAAM8P,SAAS+B,IAAIkD,EAAGvW,IAAK0W,EAAoB,IAEjD,IAAItF,EAAaiD,GAAqB7S,EAAM4P,WAC5CoB,GAAYjT,EAAS,CACnBwR,WAAYgD,GACX3C,EAAgD,IAAnC5R,OAAOyT,KAAK7B,GAAYtR,OAAe,CACrDsR,WAAY,MACV,CACFA,cACE,CAAC,EAAG+E,EAAqBrW,OAAS,EAAI,CACxCwR,SAAU,IAAIC,IAAI/P,EAAM8P,WACtB,CAAC,GACP,CACA6E,EAAqBjO,SAAQqO,IACvBxE,EAAiB6E,IAAIL,EAAGvW,MAC1B6W,GAAaN,EAAGvW,KAEduW,EAAGO,YAIL/E,EAAiBsB,IAAIkD,EAAGvW,IAAKuW,EAAGO,WAClC,IAGF,IAAIC,EAAiC,IAAMZ,EAAqBjO,SAAQ8O,GAAKH,GAAaG,EAAEhX,OACxFyQ,GACFA,EAA4BgE,OAAO/R,iBAAiB,QAASqU,GAE/D,IAAI,QACFE,EAAO,cACPC,EAAa,eACbC,SACQC,GAA+B5V,EAAM+F,QAASA,EAAS2O,EAAeC,EAAsB5B,GACtG,GAAIA,EAAQE,OAAOQ,QACjB,MAAO,CACLC,gBAAgB,GAMhBzE,GACFA,EAA4BgE,OAAO9R,oBAAoB,QAASoU,GAElEZ,EAAqBjO,SAAQqO,GAAMxE,EAAiBsF,OAAOd,EAAGvW,OAE9D,IAAIsX,EAAWC,GAAaN,GAC5B,GAAIK,EAAU,CACZ,GAAIA,EAAS7V,KAAOyU,EAAcpW,OAAQ,CAIxC,IAAI0X,EAAarB,EAAqBmB,EAAS7V,IAAMyU,EAAcpW,QAAQE,IAC3EmS,EAAiBsF,IAAID,EACvB,CAIA,aAHMjC,GAAwB/T,EAAO8V,EAASvO,OAAQ,CACpDrF,YAEK,CACLwR,gBAAgB,EAEpB,CAEA,IAAI,WACF/D,EAAU,OACVE,GACEqG,GAAkBlW,EAAO+F,EAAS2O,EAAegB,EAAe5C,EAAc6B,EAAsBgB,EAAgB9E,GAExHA,EAAgBnK,SAAQ,CAACyP,EAActC,KACrCsC,EAAaC,WAAU3C,KAIjBA,GAAW0C,EAAaE,OAC1BxF,EAAgBgF,OAAOhC,EACzB,GACA,IAEJ,IAAIgB,EAAkBC,KAClBwB,EAAqBC,GAAqB9F,GAE9C,OAAO1S,EAAS,CACd4R,aACAE,UAHyBgF,GAAmByB,GAAsB3B,EAAqBrW,OAAS,EAIxE,CACxBwR,SAAU,IAAIC,IAAI/P,EAAM8P,WACtB,CAAC,EACP,CAjOY0G,CAAczD,EAAS1S,EAAU0F,EAASwM,EAAmBN,GAAQA,EAAKU,WAAYV,GAAQA,EAAKsC,kBAAmBtC,GAAQA,EAAK/P,QAAS2Q,EAAmBC,GACrKY,IAMJzE,EAA8B,KAC9BkC,GAAmB9Q,EAAUtC,EAAS,CACpCgI,WACC8M,EAAoB,CACrBjD,WAAYiD,GACV,CAAC,EAAG,CACNlD,aACAE,YAEJ,CAkNA,SAAS4G,GAAWjY,GAClB,OAAOwB,EAAM8P,SAASmF,IAAIzW,IAAQyO,CACpC,CAsSA8E,eAAegC,GAAwB/T,EAAO8V,EAAUY,GACtD,IAAI,WACF/D,EAAU,QACVzQ,EAAO,sBACPyU,QACY,IAAVD,EAAmB,CAAC,EAAIA,EACxBZ,EAASc,aACXxG,GAAyB,GAE3B,IAAIyG,EAAmBlV,EAAe3B,EAAMK,SAAUyV,EAASzV,SAC/DtC,EAAS,CACPyT,aAAa,GACZmF,EAAwB,CACzBG,wBAAwB,GACtB,CAAC,IAGL,GAFAlW,EAAUiW,EAAkB,kDAExBxJ,EAAmB/E,KAAKwN,EAASzV,WAAauN,EAAW,CAC3D,IAAIvM,EAAMqM,EAAKhO,QAAQY,UAAUwV,EAASzV,UACtC0W,EAA+D,MAAzC9R,EAAc5D,EAAIC,SAAU0D,GACtD,GAAI2I,EAAatN,SAASI,SAAWY,EAAIZ,QAAUsW,EAMjD,YALI7U,EACFyL,EAAatN,SAAS6B,QAAQ4T,EAASzV,UAEvCsN,EAAatN,SAASpC,OAAO6X,EAASzV,UAI5C,CAGA4O,EAA8B,KAC9B,IAAI+H,GAAoC,IAAZ9U,EAAmBpD,EAAOqD,QAAUrD,EAAO4C,KAGnE8S,EAAmB7B,GAAc8B,GAA4BzU,EAAMuP,YAIvE,GAAI9C,EAAkC2I,IAAIU,EAAS/J,SAAWyI,GAAoBjD,GAAiBiD,EAAiB7H,kBAC5GqF,GAAgBgF,EAAuBH,EAAkB,CAC7DlE,WAAY5U,EAAS,CAAC,EAAGyW,EAAkB,CACzC5H,WAAYkJ,EAASzV,WAGvBoP,mBAAoBS,SAEjB,GAAIyG,QAGH3E,GAAgBgF,EAAuBH,EAAkB,CAC7DrE,mBAAoB6B,GAAqBwC,GACzCtC,kBAAmBC,EAEnB/E,mBAAoBS,QAEjB,CAEL,IAAIsC,EAAqB6B,GAAqBwC,EAAkBrC,SAC1DxC,GAAgBgF,EAAuBH,EAAkB,CAC7DrE,qBAEA/C,mBAAoBS,GAExB,CACF,CACA6B,eAAe6D,GAA+BqB,EAAgBlR,EAAS2O,EAAewC,EAAgBnE,GAIpG,IAAI0C,QAAgB0B,QAAQC,IAAI,IAAI1C,EAActQ,KAAIwE,GAAS4K,GAAmB,SAAUT,EAASnK,EAAO7C,EAAS5B,EAAUF,EAAoBe,QAAekS,EAAe9S,KAAIoR,GAC/KA,EAAEzP,SAAWyP,EAAE5M,OAAS4M,EAAEF,WACrB9B,GAAmB,SAAUR,GAAwBtF,EAAKhO,QAAS8V,EAAEjS,KAAMiS,EAAEF,WAAWrC,QAASuC,EAAE5M,MAAO4M,EAAEzP,QAAS5B,EAAUF,EAAoBe,GAE9I,CACV2O,KAAM/P,EAAW7B,MACjBA,MAAO+M,GAAuB,IAAK,CACjCxN,SAAUkU,EAAEjS,YAMhBmS,EAAgBD,EAAQjQ,MAAM,EAAGkP,EAAcpW,QAC/CqX,EAAiBF,EAAQjQ,MAAMkP,EAAcpW,QAEjD,aADM6Y,QAAQC,IAAI,CAACC,GAAuBJ,EAAgBvC,EAAegB,EAAeA,EAActR,KAAI,IAAM2O,EAAQE,UAAS,EAAOjT,EAAM2P,YAAa0H,GAAuBJ,EAAgBC,EAAe9S,KAAIoR,GAAKA,EAAE5M,QAAQ+M,EAAgBuB,EAAe9S,KAAIoR,GAAKA,EAAEF,WAAaE,EAAEF,WAAWrC,OAAS,QAAO,KACjT,CACLwC,UACAC,gBACAC,iBAEJ,CACA,SAASvC,KAEPhD,GAAyB,EAGzBC,EAAwB5O,QAAQiR,MAEhC9B,EAAiBlK,SAAQ,CAAC2C,EAAG7K,KACvB+R,EAAiB6E,IAAI5W,KACvB8R,EAAsB7O,KAAKjD,GAC3B6W,GAAa7W,GACf,GAEJ,CACA,SAAS8Y,GAAgB9Y,EAAKqV,EAAS9R,GACrC,IAAIkS,EAAgBf,GAAoBlT,EAAM+F,QAAS8N,GACvD0D,GAAc/Y,GACdwS,GAAY,CACVnB,OAAQ,CACN,CAACoE,EAAc5P,MAAME,IAAKxC,GAE5B+N,SAAU,IAAIC,IAAI/P,EAAM8P,WAE5B,CACA,SAASyH,GAAc/Y,GACrB,IAAIwW,EAAUhV,EAAM8P,SAASmF,IAAIzW,IAI7B+R,EAAiB6E,IAAI5W,IAAUwW,GAA6B,YAAlBA,EAAQhV,OAAuB0Q,EAAe0E,IAAI5W,IAC9F6W,GAAa7W,GAEfoS,EAAiBiF,OAAOrX,GACxBkS,EAAemF,OAAOrX,GACtBmS,EAAiBkF,OAAOrX,GACxBwB,EAAM8P,SAAS+F,OAAOrX,EACxB,CACA,SAAS6W,GAAa7W,GACpB,IAAI8W,EAAa/E,EAAiB0E,IAAIzW,GACtCoC,EAAU0U,EAAY,8BAAgC9W,GACtD8W,EAAWpD,QACX3B,EAAiBsF,OAAOrX,EAC1B,CACA,SAASgZ,GAAiB/F,GACxB,IAAK,IAAIjT,KAAOiT,EAAM,CACpB,IACIgG,EAAcC,GADJjB,GAAWjY,GACgByN,MACzCjM,EAAM8P,SAAS+B,IAAIrT,EAAKiZ,EAC1B,CACF,CACA,SAAS3C,KACP,IAAI6C,EAAW,GACX9C,GAAkB,EACtB,IAAK,IAAIrW,KAAOmS,EAAkB,CAChC,IAAIqE,EAAUhV,EAAM8P,SAASmF,IAAIzW,GACjCoC,EAAUoU,EAAS,qBAAuBxW,GACpB,YAAlBwW,EAAQhV,QACV2Q,EAAiBkF,OAAOrX,GACxBmZ,EAASlW,KAAKjD,GACdqW,GAAkB,EAEtB,CAEA,OADA2C,GAAiBG,GACV9C,CACT,CACA,SAAS0B,GAAqBqB,GAC5B,IAAIC,EAAa,GACjB,IAAK,IAAKrZ,EAAK+F,KAAOmM,EACpB,GAAInM,EAAKqT,EAAU,CACjB,IAAI5C,EAAUhV,EAAM8P,SAASmF,IAAIzW,GACjCoC,EAAUoU,EAAS,qBAAuBxW,GACpB,YAAlBwW,EAAQhV,QACVqV,GAAa7W,GACbkS,EAAemF,OAAOrX,GACtBqZ,EAAWpW,KAAKjD,GAEpB,CAGF,OADAgZ,GAAiBK,GACVA,EAAWvZ,OAAS,CAC7B,CAQA,SAASwZ,GAActZ,GACrBwB,EAAMgQ,SAAS6F,OAAOrX,GACtBsS,EAAiB+E,OAAOrX,EAC1B,CAEA,SAASuZ,GAAcvZ,EAAKwZ,GAC1B,IAAIC,EAAUjY,EAAMgQ,SAASiF,IAAIzW,IAAQ0O,EAGzCtM,EAA4B,cAAlBqX,EAAQjY,OAA8C,YAArBgY,EAAWhY,OAAyC,YAAlBiY,EAAQjY,OAA4C,YAArBgY,EAAWhY,OAAyC,YAAlBiY,EAAQjY,OAA4C,eAArBgY,EAAWhY,OAA4C,YAAlBiY,EAAQjY,OAA4C,cAArBgY,EAAWhY,OAA2C,eAAlBiY,EAAQjY,OAA+C,cAArBgY,EAAWhY,MAAuB,qCAAuCiY,EAAQjY,MAAQ,OAASgY,EAAWhY,OACpa,IAAIgQ,EAAW,IAAID,IAAI/P,EAAMgQ,UAC7BA,EAAS6B,IAAIrT,EAAKwZ,GAClBhH,GAAY,CACVhB,YAEJ,CACA,SAASkI,GAAsBC,GAC7B,IAAI,gBACFC,EAAe,aACfC,EAAY,cACZ/I,GACE6I,EACJ,GAA8B,IAA1BrH,EAAiBa,KACnB,OAIEb,EAAiBa,KAAO,GAC1BjP,GAAQ,EAAO,gDAEjB,IAAI4V,EAAUC,MAAMzN,KAAKgG,EAAiBwH,YACrCE,EAAYC,GAAmBH,EAAQA,EAAQha,OAAS,GACzD2Z,EAAUjY,EAAMgQ,SAASiF,IAAIuD,GACjC,OAAIP,GAA6B,eAAlBA,EAAQjY,WAAvB,EAOIyY,EAAgB,CAClBL,kBACAC,eACA/I,kBAEOkJ,OALT,CAOF,CACA,SAAS9F,GAAsBgG,GAC7B,IAAIC,EAAoB,GAWxB,OAVA9H,EAAgBnK,SAAQ,CAACkS,EAAK/E,KACvB6E,IAAaA,EAAU7E,KAI1B+E,EAAIC,SACJF,EAAkBlX,KAAKoS,GACvBhD,EAAgBgF,OAAOhC,GACzB,IAEK8E,CACT,CAyBA,SAASvG,GAAa/R,EAAU0F,GAC9B,OAAIyI,GACQA,EAAwBnO,EAAU0F,EAAQ3B,KAAI+K,GA8zC9D,SAA+BvG,EAAO+G,GACpC,IAAI,MACFtL,EAAK,SACL/C,EAAQ,OACRwH,GACEF,EACJ,MAAO,CACLrE,GAAIF,EAAME,GACVjD,WACAwH,SACAmD,KAAM0D,EAAWtL,EAAME,IACvBuU,OAAQzU,EAAMyU,OAElB,CA30CmEC,CAAsB5J,EAAGnP,EAAM2P,gBAGvFtP,EAAS7B,GAClB,CAOA,SAASsT,GAAuBzR,EAAU0F,GACxC,GAAIwI,EAAsB,CACxB,IAAI/P,EAAM4T,GAAa/R,EAAU0F,GAC7BiT,EAAIzK,EAAqB/P,GAC7B,GAAiB,iBAANwa,EACT,OAAOA,CAEX,CACA,OAAO,IACT,CAoCA,OA/BAhK,EAAS,CACP,YAAIhK,GACF,OAAOA,CACT,EACA,SAAIhF,GACF,OAAOA,CACT,EACA,UAAIgE,GACF,OAAOiK,CACT,EACAgL,WAxoCF,WA2DE,OAxDA5K,EAAkBX,EAAKhO,QAAQqB,QAAOsC,IACpC,IACE1D,OAAQ2P,EAAa,SACrBjP,EAAQ,MACRD,GACEiD,EAGJ,GAAI0N,EAEF,YADAA,GAA0B,GAG5BrO,EAAkC,IAA1BoO,EAAiBa,MAAuB,MAATvR,EAAe,8YACtD,IAAIoY,EAAaN,GAAsB,CACrCE,gBAAiBpY,EAAMK,SACvBgY,aAAchY,EACdiP,kBAEF,OAAIkJ,GAAuB,MAATpY,GAEhB2Q,GAA0B,EAC1BrD,EAAKhO,QAAQ0C,IAAY,EAAThC,QAEhB2X,GAAcS,EAAY,CACxBxY,MAAO,UACPK,WACA,OAAA8M,GACE4K,GAAcS,EAAY,CACxBxY,MAAO,aACPmN,aAAStI,EACTuI,WAAOvI,EACPxE,aAGFqN,EAAKhO,QAAQ0C,GAAGhC,EAClB,EACA,KAAAgN,GACE,IAAI4C,EAAW,IAAID,IAAI/P,EAAMgQ,UAC7BA,EAAS6B,IAAI2G,EAAYtL,GACzB8D,GAAY,CACVhB,YAEJ,KAIGgC,GAAgB1C,EAAejP,EAAS,IAO5CL,EAAMkP,aACT8C,GAAgBlT,EAAOc,IAAKI,EAAMK,UAE7B2O,CACT,EA6kCEoH,UAjkCF,SAAmBpV,GAEjB,OADAsN,EAAY2H,IAAIjV,GACT,IAAMsN,EAAYuH,OAAO7U,EAClC,EA+jCEkY,wBA7DF,SAAiCC,EAAWC,EAAaC,GAOvD,GANA9K,EAAuB4K,EACvB1K,EAAoB2K,EACpB5K,EAA0B6K,GAAU,MAI/B3K,GAAyB1O,EAAMuP,aAAe7C,EAAiB,CAClEgC,GAAwB,EACxB,IAAIsK,EAAIlH,GAAuB9R,EAAMK,SAAUL,EAAM+F,SAC5C,MAALiT,GACFhI,GAAY,CACVxB,sBAAuBwJ,GAG7B,CACA,MAAO,KACLzK,EAAuB,KACvBE,EAAoB,KACpBD,EAA0B,IAAI,CAElC,EAyCE8K,SAn/BFvH,eAAeuH,EAAS/Y,EAAI0R,GAC1B,GAAkB,iBAAP1R,EAET,YADAmN,EAAKhO,QAAQ0C,GAAG7B,GAGlB,IAAIgZ,EAAiBC,EAAYxZ,EAAMK,SAAUL,EAAM+F,QAASf,EAAUkJ,EAAOE,mBAAoB7N,EAAY,MAAR0R,OAAe,EAASA,EAAKwH,YAAqB,MAARxH,OAAe,EAASA,EAAKyH,WAC5K,KACFnW,EAAI,WACJoP,EAAU,MACV5Q,GACE4X,EAAyBzL,EAAOC,wBAAwB,EAAOoL,EAAgBtH,GAC/EmG,EAAkBpY,EAAMK,SACxBgY,EAAe1W,EAAe3B,EAAMK,SAAUkD,EAAM0O,GAAQA,EAAKjS,OAMrEqY,EAAeta,EAAS,CAAC,EAAGsa,EAAc3K,EAAKhO,QAAQ0B,eAAeiX,IACtE,IAAIuB,EAAc3H,GAAwB,MAAhBA,EAAK/P,QAAkB+P,EAAK/P,aAAU2C,EAC5DyK,EAAgBxQ,EAAO4C,MACP,IAAhBkY,EACFtK,EAAgBxQ,EAAOqD,SACE,IAAhByX,GAAgD,MAAdjH,GAAsBpB,GAAiBoB,EAAWhG,aAAegG,EAAW/F,aAAe5M,EAAMK,SAASiB,SAAWtB,EAAMK,SAASkB,SAK/K+N,EAAgBxQ,EAAOqD,SAEzB,IAAIsN,EAAqBwC,GAAQ,uBAAwBA,GAAmC,IAA5BA,EAAKxC,wBAA8B5K,EAC/F2T,EAAaN,GAAsB,CACrCE,kBACAC,eACA/I,kBAEF,IAAIkJ,EAyBJ,aAAaxG,GAAgB1C,EAAe+I,EAAc,CACxD1F,aAGAG,aAAc/Q,EACd0N,qBACAvN,QAAS+P,GAAQA,EAAK/P,UA7BtB6V,GAAcS,EAAY,CACxBxY,MAAO,UACPK,SAAUgY,EACV,OAAAlL,GACE4K,GAAcS,EAAY,CACxBxY,MAAO,aACPmN,aAAStI,EACTuI,WAAOvI,EACPxE,SAAUgY,IAGZiB,EAAS/Y,EAAI0R,EACf,EACA,KAAA7E,GACE,IAAI4C,EAAW,IAAID,IAAI/P,EAAMgQ,UAC7BA,EAAS6B,IAAI2G,EAAYtL,GACzB8D,GAAY,CACVhB,YAEJ,GAYN,EA+6BE6J,MAvlBF,SAAerb,EAAKqV,EAASnT,EAAMuR,GACjC,GAAInE,EACF,MAAM,IAAI7M,MAAM,oMAEdsP,EAAiB6E,IAAI5W,IAAM6W,GAAa7W,GAC5C,IAAI8T,EAActE,GAAsBC,EACpCsL,EAAiBC,EAAYxZ,EAAMK,SAAUL,EAAM+F,QAASf,EAAUkJ,EAAOE,mBAAoB1N,EAAMmT,EAAiB,MAAR5B,OAAe,EAASA,EAAKyH,UAC7I3T,EAAUjB,EAAYwN,EAAaiH,EAAgBvU,GACvD,IAAKe,EAIH,YAHAuR,GAAgB9Y,EAAKqV,EAAS/E,GAAuB,IAAK,CACxDxN,SAAUiY,KAId,IAAI,KACFhW,EAAI,WACJoP,EAAU,MACV5Q,GACE4X,EAAyBzL,EAAOC,wBAAwB,EAAMoL,EAAgBtH,GAClF,GAAIlQ,EAEF,YADAuV,GAAgB9Y,EAAKqV,EAAS9R,GAGhC,IAAI6G,EAAQ2K,GAAexN,EAASxC,GACpC2M,GAAkE,KAArC+B,GAAQA,EAAKxC,oBACtCkD,GAAcpB,GAAiBoB,EAAWhG,YAchDoF,eAAmCvT,EAAKqV,EAAStQ,EAAMqF,EAAOkR,EAAgBnH,GAG5E,GAFAS,KACAxC,EAAiBiF,OAAOrX,IACnBoK,EAAMvE,MAAM1E,SAAWiJ,EAAMvE,MAAM+K,KAAM,CAC5C,IAAIrN,EAAQ+M,GAAuB,IAAK,CACtC8E,OAAQjB,EAAWhG,WACnBrL,SAAUiC,EACVsQ,QAASA,IAGX,YADAyD,GAAgB9Y,EAAKqV,EAAS9R,EAEhC,CAEA,IACIiT,EAg8DR,SAA8BrC,EAAYoH,GAYxC,MAXc,CACZ/Z,MAAO,aACP2M,WAAYgG,EAAWhG,WACvBC,WAAY+F,EAAW/F,WACvBC,YAAa8F,EAAW9F,YACxBC,SAAU6F,EAAW7F,SACrBC,KAAM4F,EAAW5F,KACjBC,KAAM2F,EAAW3F,KACjBf,KAAM8N,EAAkBA,EAAgB9N,UAAOpH,EAC/C,6BAA6B,EAGjC,CA78DkBmV,CAAqBrH,EADb3S,EAAM8P,SAASmF,IAAIzW,IAEzCwB,EAAM8P,SAAS+B,IAAIrT,EAAKwW,GACxBhE,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,YAG1B,IAAImK,EAAkB,IAAIrH,gBACtBsH,EAAelH,GAAwBtF,EAAKhO,QAAS6D,EAAM0W,EAAgBhH,OAAQN,GACvFpC,EAAiBsB,IAAIrT,EAAKyb,GAC1B,IAAIE,EAAoB3J,EACpB4J,QAAqB5G,GAAmB,SAAU0G,EAActR,EAAOkR,EAAgB3V,EAAUF,EAAoBe,GACzH,GAAIkV,EAAajH,OAAOQ,QAMtB,YAHIlD,EAAiB0E,IAAIzW,KAASyb,GAChC1J,EAAiBsF,OAAOrX,IAI5B,GAAIsV,GAAiBsG,GAAe,CAElC,GADA7J,EAAiBsF,OAAOrX,GACpBiS,EAA0B0J,EAAmB,CAK/C,IAAI1C,EAAcC,QAAe7S,GAKjC,OAJA7E,EAAM8P,SAAS+B,IAAIrT,EAAKiZ,QACxBzG,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,WAG5B,CAAO,CACLa,EAAiBsF,IAAIzX,GACrB,IAAI6b,EAAiBlF,GAAkBxC,GAKvC,OAJA3S,EAAM8P,SAAS+B,IAAIrT,EAAK6b,GACxBrJ,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,YAEnBiE,GAAwB/T,EAAOoa,EAAc,CAClDzH,aACAgE,uBAAuB,GAE3B,CACF,CAEA,GAAI3C,GAAcoG,GAEhB,YADA9C,GAAgB9Y,EAAKqV,EAASuG,EAAarY,OAG7C,GAAIoS,GAAiBiG,GACnB,MAAMtL,GAAuB,IAAK,CAChC6E,KAAM,iBAKV,IAAI0E,EAAerY,EAAMuP,WAAWlP,UAAYL,EAAMK,SAClDia,EAAsBtH,GAAwBtF,EAAKhO,QAAS2Y,EAAc4B,EAAgBhH,QAC1FX,EAActE,GAAsBC,EACpClI,EAAqC,SAA3B/F,EAAMuP,WAAWvP,MAAmB8E,EAAYwN,EAAatS,EAAMuP,WAAWlP,SAAU2E,GAAYhF,EAAM+F,QACxHnF,EAAUmF,EAAS,gDACnB,IAAIwU,IAAW/J,EACfE,EAAemB,IAAIrT,EAAK+b,GACxB,IAAIC,EAAcrF,GAAkBxC,EAAYyH,EAAanO,MAC7DjM,EAAM8P,SAAS+B,IAAIrT,EAAKgc,GACxB,IAAK9F,EAAeC,GAAwBC,GAAiBlH,EAAKhO,QAASM,EAAO+F,EAAS4M,EAAY0F,EAAcjI,EAAwBC,EAAyBC,EAAuBM,EAAkBD,EAAkB2B,EAAatN,EAAU,CACtP,CAAC4D,EAAMvE,MAAME,IAAK6V,EAAanO,WAC9BpH,GAKH8P,EAAqBxM,QAAO4M,GAAMA,EAAGvW,MAAQA,IAAKkI,SAAQqO,IACxD,IAAI0F,EAAW1F,EAAGvW,IACdub,EAAkB/Z,EAAM8P,SAASmF,IAAIwF,GACrCvF,EAAsBC,QAAkBtQ,EAAWkV,EAAkBA,EAAgB9N,UAAOpH,GAChG7E,EAAM8P,SAAS+B,IAAI4I,EAAUvF,GACzB3E,EAAiB6E,IAAIqF,IACvBpF,GAAaoF,GAEX1F,EAAGO,YACL/E,EAAiBsB,IAAI4I,EAAU1F,EAAGO,WACpC,IAEFtE,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,YAE1B,IAAIyF,EAAiC,IAAMZ,EAAqBjO,SAAQqO,GAAMM,GAAaN,EAAGvW,OAC9Fyb,EAAgBhH,OAAO/R,iBAAiB,QAASqU,GACjD,IAAI,QACFE,EAAO,cACPC,EAAa,eACbC,SACQC,GAA+B5V,EAAM+F,QAASA,EAAS2O,EAAeC,EAAsB2F,GACtG,GAAIL,EAAgBhH,OAAOQ,QACzB,OAEFwG,EAAgBhH,OAAO9R,oBAAoB,QAASoU,GACpD7E,EAAemF,OAAOrX,GACtB+R,EAAiBsF,OAAOrX,GACxBmW,EAAqBjO,SAAQgU,GAAKnK,EAAiBsF,OAAO6E,EAAElc,OAC5D,IAAIsX,EAAWC,GAAaN,GAC5B,GAAIK,EAAU,CACZ,GAAIA,EAAS7V,KAAOyU,EAAcpW,OAAQ,CAIxC,IAAI0X,EAAarB,EAAqBmB,EAAS7V,IAAMyU,EAAcpW,QAAQE,IAC3EmS,EAAiBsF,IAAID,EACvB,CACA,OAAOjC,GAAwB/T,EAAO8V,EAASvO,OACjD,CAEA,IAAI,WACFoI,EAAU,OACVE,GACEqG,GAAkBlW,EAAOA,EAAM+F,QAAS2O,EAAegB,OAAe7Q,EAAW8P,EAAsBgB,EAAgB9E,GAG3H,GAAI7Q,EAAM8P,SAASsF,IAAI5W,GAAM,CAC3B,IAAIiZ,EAAcC,GAAe0C,EAAanO,MAC9CjM,EAAM8P,SAAS+B,IAAIrT,EAAKiZ,EAC1B,CACA,IAAInB,EAAqBC,GAAqBgE,GAIf,YAA3Bva,EAAMuP,WAAWvP,OAAuBua,EAAS9J,GACnD7P,EAAUqP,EAAe,2BACzBhB,GAA+BA,EAA4BiD,QAC3Df,GAAmBnR,EAAMuP,WAAWlP,SAAU,CAC5C0F,UACA4J,aACAE,SACAC,SAAU,IAAIC,IAAI/P,EAAM8P,cAM1BkB,GAAYjT,EAAS,CACnB8R,SACAF,WAAY+B,GAAgB1R,EAAM2P,WAAYA,EAAY5J,EAAS8J,IAClEyG,GAAsB3B,EAAqBrW,OAAS,EAAI,CACzDwR,SAAU,IAAIC,IAAI/P,EAAM8P,WACtB,CAAC,IACLM,GAAyB,EAE7B,CAhLIuK,CAAoBnc,EAAKqV,EAAStQ,EAAMqF,EAAO7C,EAAS4M,IAK1D/B,EAAiBiB,IAAIrT,EAAK,CACxBqV,UACAtQ,SA2KJwO,eAAmCvT,EAAKqV,EAAStQ,EAAMqF,EAAO7C,EAAS4M,GACrE,IAAIoH,EAAkB/Z,EAAM8P,SAASmF,IAAIzW,GAErC6b,EAAiBlF,GAAkBxC,EAAYoH,EAAkBA,EAAgB9N,UAAOpH,GAC5F7E,EAAM8P,SAAS+B,IAAIrT,EAAK6b,GACxBrJ,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,YAG1B,IAAImK,EAAkB,IAAIrH,gBACtBsH,EAAelH,GAAwBtF,EAAKhO,QAAS6D,EAAM0W,EAAgBhH,QAC/E1C,EAAiBsB,IAAIrT,EAAKyb,GAC1B,IAAIE,EAAoB3J,EACpBjJ,QAAeiM,GAAmB,SAAU0G,EAActR,EAAO7C,EAAS5B,EAAUF,EAAoBe,GAa5G,GARImP,GAAiB5M,KACnBA,QAAgBqT,GAAoBrT,EAAQ2S,EAAajH,QAAQ,IAAU1L,GAIzEgJ,EAAiB0E,IAAIzW,KAASyb,GAChC1J,EAAiBsF,OAAOrX,GAEtB0b,EAAajH,OAAOQ,QACtB,OAGF,GAAIK,GAAiBvM,GAAS,CAC5B,GAAIkJ,EAA0B0J,EAAmB,CAG/C,IAAI1C,EAAcC,QAAe7S,GAKjC,OAJA7E,EAAM8P,SAAS+B,IAAIrT,EAAKiZ,QACxBzG,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,WAG5B,CAGE,OAFAa,EAAiBsF,IAAIzX,cACfuV,GAAwB/T,EAAOuH,EAGzC,CAEA,GAAIyM,GAAczM,GAAS,CACzB,IAAI0M,EAAgBf,GAAoBlT,EAAM+F,QAAS8N,GAWvD,OAVA7T,EAAM8P,SAAS+F,OAAOrX,QAItBwS,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,UACxBD,OAAQ,CACN,CAACoE,EAAc5P,MAAME,IAAKgD,EAAOxF,QAIvC,CACAnB,GAAWuT,GAAiB5M,GAAS,mCAErC,IAAIkQ,EAAcC,GAAenQ,EAAO0E,MACxCjM,EAAM8P,SAAS+B,IAAIrT,EAAKiZ,GACxBzG,GAAY,CACVlB,SAAU,IAAIC,IAAI/P,EAAM8P,WAE5B,CA7OE+K,CAAoBrc,EAAKqV,EAAStQ,EAAMqF,EAAO7C,EAAS4M,GAC1D,EAojBEiE,WA56BF,WACExD,KACApC,GAAY,CACVtB,aAAc,YAIe,eAA3B1P,EAAMuP,WAAWvP,QAMU,SAA3BA,EAAMuP,WAAWvP,MASrBgS,GAAgB/B,GAAiBjQ,EAAMsP,cAAetP,EAAMuP,WAAWlP,SAAU,CAC/EmS,mBAAoBxS,EAAMuP,aAT1ByC,GAAgBhS,EAAMsP,cAAetP,EAAMK,SAAU,CACnD8R,gCAAgC,IAUtC,EAs5BEhT,WAAYoB,GAAMmN,EAAKhO,QAAQP,WAAWoB,GAC1Ca,eAAgBb,GAAMmN,EAAKhO,QAAQ0B,eAAeb,GAClDkW,cACAc,iBACAuD,QAtlCF,WACMzM,GACFA,IAEFC,EAAYyM,QACZ9L,GAA+BA,EAA4BiD,QAC3DlS,EAAM8P,SAASpJ,SAAQ,CAAC2C,EAAG7K,IAAQ+Y,GAAc/Y,KACjDwB,EAAMgQ,SAAStJ,SAAQ,CAAC2C,EAAG7K,IAAQsZ,GAActZ,IACnD,EA+kCEwc,WA/IF,SAAoBxc,EAAKwC,GACvB,IAAIiX,EAAUjY,EAAMgQ,SAASiF,IAAIzW,IAAQ0O,EAIzC,OAHI4D,EAAiBmE,IAAIzW,KAASwC,GAChC8P,EAAiBe,IAAIrT,EAAKwC,GAErBiX,CACT,EA0IEH,iBACAmD,0BAA2B1K,EAC3B2K,yBAA0BrK,EAG1BsK,mBAjCF,SAA4BC,GAC1BjX,EAAW,CAAC,EACZ6J,EAAqBjK,EAA0BqX,EAAWnX,OAAoBY,EAAWV,EAC3F,GAgCO6K,CACT,CA4YA,SAASwK,EAAYnZ,EAAU0F,EAASf,EAAUqW,EAAiB9a,EAAIkZ,EAAaC,GAClF,IAAI4B,EACAC,EACJ,GAAmB,MAAf9B,GAAoC,SAAbC,EAAqB,CAK9C4B,EAAoB,GACpB,IAAK,IAAI1S,KAAS7C,EAEhB,GADAuV,EAAkB7Z,KAAKmH,GACnBA,EAAMvE,MAAME,KAAOkV,EAAa,CAClC8B,EAAmB3S,EACnB,KACF,CAEJ,MACE0S,EAAoBvV,EACpBwV,EAAmBxV,EAAQA,EAAQzH,OAAS,GAG9C,IAAIiF,EAAOkH,EAAUlK,GAAU,IAAKiK,EAA2B8Q,GAAmBlX,KAAI+K,GAAKA,EAAEpG,eAAe9D,EAAc5E,EAASiB,SAAU0D,IAAa3E,EAASiB,SAAuB,SAAboY,GAmB7K,OAfU,MAANnZ,IACFgD,EAAKhC,OAASlB,EAASkB,OACvBgC,EAAK/B,KAAOnB,EAASmB,MAGZ,MAANjB,GAAqB,KAAPA,GAAoB,MAAPA,IAAegb,IAAoBA,EAAiBlX,MAAMvE,OAAU0b,GAAmBjY,EAAKhC,UAC1HgC,EAAKhC,OAASgC,EAAKhC,OAASgC,EAAKhC,OAAOW,QAAQ,MAAO,WAAa,UAMlEmZ,GAAgC,MAAbrW,IACrBzB,EAAKjC,SAA6B,MAAlBiC,EAAKjC,SAAmB0D,EAAWuB,EAAU,CAACvB,EAAUzB,EAAKjC,YAExEX,EAAW4C,EACpB,CAGA,SAASoW,EAAyB8B,EAAqBC,EAAWnY,EAAM0O,GAEtE,IAAKA,IAjDP,SAAgCA,GAC9B,OAAe,MAARA,IAAiB,aAAcA,GAAyB,MAAjBA,EAAKnF,UAAoB,SAAUmF,QAAsBpN,IAAdoN,EAAK0J,KAChG,CA+CgBC,CAAuB3J,GACnC,MAAO,CACL1O,QAGJ,GAAI0O,EAAKtF,aAswBYiH,EAtwBiB3B,EAAKtF,YAuwBpCJ,EAAoB6I,IAAIxB,EAAO7J,gBAtwBpC,MAAO,CACLxG,OACAxB,MAAO+M,GAAuB,IAAK,CACjC8E,OAAQ3B,EAAKtF,cAkwBrB,IAAuBiH,EA9vBrB,IAyDIiI,EACA/O,EA1DAgP,EAAsB,KAAM,CAC9BvY,OACAxB,MAAO+M,GAAuB,IAAK,CACjC6E,KAAM,mBAINoI,EAAgB9J,EAAKtF,YAAc,MACnCA,EAAa8O,EAAsBM,EAAcC,cAAgBD,EAAchS,cAC/E6C,EAAaqP,GAAkB1Y,GACnC,QAAkBsB,IAAdoN,EAAK0J,KAAoB,CAC3B,GAAyB,eAArB1J,EAAKpF,YAA8B,CAErC,IAAK0E,GAAiB5E,GACpB,OAAOmP,IAET,IAAI9O,EAA4B,iBAAdiF,EAAK0J,KAAoB1J,EAAK0J,KAAO1J,EAAK0J,gBAAgBO,UAAYjK,EAAK0J,gBAAgBQ,gBAE7G5D,MAAMzN,KAAKmH,EAAK0J,KAAKrD,WAAWlQ,QAAO,CAACgU,EAAKC,KAC3C,IAAKpa,EAAMO,GAAS6Z,EACpB,MAAO,GAAKD,EAAMna,EAAO,IAAMO,EAAQ,IAAI,GAC1C,IAAM8Z,OAAOrK,EAAK0J,MACrB,MAAO,CACLpY,OACAoP,WAAY,CACVhG,aACAC,aACAC,YAAaoF,EAAKpF,YAClBC,cAAUjI,EACVkI,UAAMlI,EACNmI,QAGN,CAAO,GAAyB,qBAArBiF,EAAKpF,YAAoC,CAElD,IAAK0E,GAAiB5E,GACpB,OAAOmP,IAET,IACE,IAAI/O,EAA4B,iBAAdkF,EAAK0J,KAAoBrR,KAAKiS,MAAMtK,EAAK0J,MAAQ1J,EAAK0J,KACxE,MAAO,CACLpY,OACAoP,WAAY,CACVhG,aACAC,aACAC,YAAaoF,EAAKpF,YAClBC,cAAUjI,EACVkI,OACAC,UAAMnI,GAGZ,CAAE,MAAO/B,GACP,OAAOgZ,GACT,CACF,CACF,CAIA,GAHAlb,EAA8B,mBAAbsb,SAAyB,iDAGtCjK,EAAKnF,SACP+O,EAAeW,GAA8BvK,EAAKnF,UAClDA,EAAWmF,EAAKnF,cACX,GAAImF,EAAK0J,gBAAgBO,SAC9BL,EAAeW,GAA8BvK,EAAK0J,MAClD7O,EAAWmF,EAAK0J,UACX,GAAI1J,EAAK0J,gBAAgBQ,gBAC9BN,EAAe5J,EAAK0J,KACpB7O,EAAW2P,GAA8BZ,QACpC,GAAiB,MAAb5J,EAAK0J,KACdE,EAAe,IAAIM,gBACnBrP,EAAW,IAAIoP,cAEf,IACEL,EAAe,IAAIM,gBAAgBlK,EAAK0J,MACxC7O,EAAW2P,GAA8BZ,EAC3C,CAAE,MAAO/Y,GACP,OAAOgZ,GACT,CAEF,IAAInJ,EAAa,CACfhG,aACAC,aACAC,YAAaoF,GAAQA,EAAKpF,aAAe,oCACzCC,WACAC,UAAMlI,EACNmI,UAAMnI,GAER,GAAI0M,GAAiBoB,EAAWhG,YAC9B,MAAO,CACLpJ,OACAoP,cAIJ,IAAInP,EAAaR,EAAUO,GAQ3B,OAJImY,GAAalY,EAAWjC,QAAUia,GAAmBhY,EAAWjC,SAClEsa,EAAaa,OAAO,QAAS,IAE/BlZ,EAAWjC,OAAS,IAAMsa,EACnB,CACLtY,KAAM5C,EAAW6C,GACjBmP,aAEJ,CAaA,SAASiC,GAAiBlV,EAASM,EAAO+F,EAAS4M,EAAYtS,EAAU+P,EAAwBC,EAAyBC,EAAuBM,EAAkBD,EAAkB2B,EAAatN,EAAU6N,EAAmBC,GAC7N,IAAIsH,EAAetH,EAAe9U,OAAO2e,OAAO7J,GAAc,GAAKD,EAAoB7U,OAAO2e,OAAO9J,GAAmB,QAAKhO,EACzH+X,EAAald,EAAQY,UAAUN,EAAMK,UACrCwc,EAAUnd,EAAQY,UAAUD,GAE5Byc,EAAahK,EAAe9U,OAAOyT,KAAKqB,GAAc,QAAKjO,EAE3DkY,EAjBN,SAAuChX,EAAS+W,GAC9C,IAAIE,EAAkBjX,EACtB,GAAI+W,EAAY,CACd,IAAIhd,EAAQiG,EAAQkX,WAAU9N,GAAKA,EAAE9K,MAAME,KAAOuY,IAC9Chd,GAAS,IACXkd,EAAkBjX,EAAQP,MAAM,EAAG1F,GAEvC,CACA,OAAOkd,CACT,CAOwBE,CAA8BnX,EAAS+W,GACrB3U,QAAO,CAACS,EAAO9I,KACrD,GAAI8I,EAAMvE,MAAM+K,KAEd,OAAO,EAET,GAA0B,MAAtBxG,EAAMvE,MAAMgL,OACd,OAAO,EAGT,GA2FJ,SAAqB8N,EAAmBC,EAAcxU,GACpD,IAAIyU,GAEHD,GAEDxU,EAAMvE,MAAME,KAAO6Y,EAAa/Y,MAAME,GAGlC+Y,OAAsDzY,IAAtCsY,EAAkBvU,EAAMvE,MAAME,IAElD,OAAO8Y,GAASC,CAClB,CAtGQC,CAAYvd,EAAM2P,WAAY3P,EAAM+F,QAAQjG,GAAQ8I,IAAUyH,EAAwBnI,MAAK3D,GAAMA,IAAOqE,EAAMvE,MAAME,KACtH,OAAO,EAMT,IAAIiZ,EAAoBxd,EAAM+F,QAAQjG,GAClC2d,EAAiB7U,EACrB,OAAO8U,GAAuB9U,EAAO7K,EAAS,CAC5C6e,aACAe,cAAeH,EAAkB1U,OACjC+T,UACAe,WAAYH,EAAe3U,QAC1B6J,EAAY,CACbyH,eACAyD,wBAEAzN,GAEAwM,EAAWtb,SAAWsb,EAAWrb,SAAWsb,EAAQvb,SAAWub,EAAQtb,QAEvEqb,EAAWrb,SAAWsb,EAAQtb,QAAUuc,GAAmBN,EAAmBC,KAC7E,IAGD9I,EAAuB,GA+D3B,OA9DA/D,EAAiBlK,SAAQ,CAAC8O,EAAGhX,KAE3B,IAAKuH,EAAQmC,MAAKiH,GAAKA,EAAE9K,MAAME,KAAOiR,EAAE3B,UACtC,OAEF,IAAIkK,EAAiBjZ,EAAYwN,EAAakD,EAAEjS,KAAMyB,GAKtD,IAAK+Y,EASH,YARApJ,EAAqBlT,KAAK,CACxBjD,MACAqV,QAAS2B,EAAE3B,QACXtQ,KAAMiS,EAAEjS,KACRwC,QAAS,KACT6C,MAAO,KACP0M,WAAY,OAOhB,IAAIN,EAAUhV,EAAM8P,SAASmF,IAAIzW,GAC7Bwf,EAAezK,GAAewK,EAAgBvI,EAAEjS,MAChD0a,GAAmB,EAGrBA,GAFEtN,EAAiByE,IAAI5W,OAGd8R,EAAsB1J,SAASpI,KAG/BwW,GAA6B,SAAlBA,EAAQhV,YAAqC6E,IAAjBmQ,EAAQ/I,KAIrCmE,EAIAsN,GAAuBM,EAAcjgB,EAAS,CAC/D6e,aACAe,cAAe3d,EAAM+F,QAAQ/F,EAAM+F,QAAQzH,OAAS,GAAGwK,OACvD+T,UACAe,WAAY7X,EAAQA,EAAQzH,OAAS,GAAGwK,QACvC6J,EAAY,CACbyH,eACAyD,wBAAyBzN,OAGzB6N,GACFtJ,EAAqBlT,KAAK,CACxBjD,MACAqV,QAAS2B,EAAE3B,QACXtQ,KAAMiS,EAAEjS,KACRwC,QAASgY,EACTnV,MAAOoV,EACP1I,WAAY,IAAI1C,iBAEpB,IAEK,CAACmK,EAAmBpI,EAC7B,CAaA,SAASmJ,GAAmBV,EAAcxU,GACxC,IAAIsV,EAAcd,EAAa/Y,MAAMd,KACrC,OAEE6Z,EAAa9b,WAAasH,EAAMtH,UAGjB,MAAf4c,GAAuBA,EAAY9W,SAAS,MAAQgW,EAAatU,OAAO,OAASF,EAAME,OAAO,IAElG,CACA,SAAS4U,GAAuBS,EAAaC,GAC3C,GAAID,EAAY9Z,MAAM4Z,iBAAkB,CACtC,IAAII,EAAcF,EAAY9Z,MAAM4Z,iBAAiBG,GACrD,GAA2B,kBAAhBC,EACT,OAAOA,CAEX,CACA,OAAOD,EAAIP,uBACb,CAMA9L,eAAeuM,GAAoBja,EAAOJ,EAAoBE,GAC5D,IAAKE,EAAM+K,KACT,OAEF,IAAImP,QAAkBla,EAAM+K,OAI5B,IAAK/K,EAAM+K,KACT,OAEF,IAAIoP,EAAgBra,EAASE,EAAME,IACnC3D,EAAU4d,EAAe,8BASzB,IAAIC,EAAe,CAAC,EACpB,IAAK,IAAIC,KAAqBH,EAAW,CACvC,IACII,OAAmD9Z,IADhC2Z,EAAcE,IAIf,qBAAtBA,EACAhc,GAASic,EAA6B,UAAaH,EAAcja,GAAK,4BAAgCma,EAAhE,yGAA4MA,EAAoB,sBACjQC,GAAgC9a,EAAmBuR,IAAIsJ,KAC1DD,EAAaC,GAAqBH,EAAUG,GAEhD,CAGA1gB,OAAOC,OAAOugB,EAAeC,GAI7BzgB,OAAOC,OAAOugB,EAAezgB,EAAS,CAAC,EAAGkG,EAAmBua,GAAgB,CAC3EpP,UAAMvK,IAEV,CACAkN,eAAeyB,GAAmBG,EAAMZ,EAASnK,EAAO7C,EAAS5B,EAAUF,EAAoBe,EAAUiN,GAIvG,IAAI2M,EACArX,EACAsX,OALS,IAAT5M,IACFA,EAAO,CAAC,GAKV,IAAI6M,EAAaC,IAEf,IAAIC,EACAC,EAAe,IAAI9H,SAAQ,CAAC9N,EAAGqR,IAAMsE,EAAStE,IAGlD,OAFAmE,EAAW,IAAMG,IACjBjM,EAAQE,OAAO/R,iBAAiB,QAAS2d,GAClC1H,QAAQ+H,KAAK,CAACH,EAAQ,CAC3BhM,UACAjK,OAAQF,EAAME,OACdqW,QAASlN,EAAKmN,iBACZH,GAAc,EAEpB,IACE,IAAIF,EAAUnW,EAAMvE,MAAMsP,GAC1B,GAAI/K,EAAMvE,MAAM+K,KACd,GAAI2P,EAGFxX,SADmB4P,QAAQC,IAAI,CAAC0H,EAAWC,GAAUT,GAAoB1V,EAAMvE,MAAOJ,EAAoBE,MAC1F,OACX,CAIL,SAFMma,GAAoB1V,EAAMvE,MAAOJ,EAAoBE,GAC3D4a,EAAUnW,EAAMvE,MAAMsP,IAClBoL,EAKG,IAAa,WAATpL,EAAmB,CAC5B,IAAItS,EAAM,IAAIR,IAAIkS,EAAQ1R,KACtBC,EAAWD,EAAIC,SAAWD,EAAIE,OAClC,MAAMuN,GAAuB,IAAK,CAChC8E,OAAQb,EAAQa,OAChBtS,WACAuS,QAASjL,EAAMvE,MAAME,IAEzB,CAGE,MAAO,CACLoP,KAAM/P,EAAWqI,KACjBA,UAAMpH,EAEV,CAhBE0C,QAAeuX,EAAWC,EAiB9B,KACK,KAAKA,EAAS,CACnB,IAAI1d,EAAM,IAAIR,IAAIkS,EAAQ1R,KAE1B,MAAMyN,GAAuB,IAAK,CAChCxN,SAFaD,EAAIC,SAAWD,EAAIE,QAIpC,CACEgG,QAAeuX,EAAWC,EAC5B,CACAne,OAAqBiE,IAAX0C,EAAsB,gBAA2B,WAAToM,EAAoB,YAAc,YAApD,eAA0F/K,EAAMvE,MAAME,GAAK,4CAA8CoP,EAAzJ,+CAClC,CAAE,MAAO7Q,GACP8b,EAAahb,EAAW7B,MACxBwF,EAASzE,CACX,CAAE,QACI+b,GACF9L,EAAQE,OAAO9R,oBAAoB,QAAS0d,EAEhD,CACA,GA0XgB,OADErc,EAzXH+E,IA0XiC,iBAAjB/E,EAAMuJ,QAAmD,iBAArBvJ,EAAMwJ,YAAoD,iBAAlBxJ,EAAM6c,cAA8C,IAAf7c,EAAMmZ,KA1X9H,CACtB,IA4CI1P,EA5CAF,EAASxE,EAAOwE,OAEpB,GAAIS,EAAoB4I,IAAIrJ,GAAS,CACnC,IAAI1L,EAAWkH,EAAO8X,QAAQpK,IAAI,YAGlC,GAFArU,EAAUP,EAAU,8EAEfgN,EAAmB/E,KAAKjI,IAEtB,IAAK4R,EAAKqN,gBAAiB,CAIhC,IAAI1C,EAAa,IAAI/b,IAAIkS,EAAQ1R,KAC7BA,EAAMhB,EAASiG,WAAW,MAAQ,IAAIzF,IAAI+b,EAAW2C,SAAWlf,GAAY,IAAIQ,IAAIR,GACpFmf,EAA0D,MAAzCva,EAAc5D,EAAIC,SAAU0D,GAC7C3D,EAAIZ,SAAWmc,EAAWnc,QAAU+e,IACtCnf,EAAWgB,EAAIC,SAAWD,EAAIE,OAASF,EAAIG,KAE/C,OAXEnB,EAAWmZ,EAAY,IAAI3Y,IAAIkS,EAAQ1R,KAAM0E,EAAQP,MAAM,EAAGO,EAAQrC,QAAQkF,GAAS,GAAI5D,GAAU,EAAM3E,GAgB7G,GAAI4R,EAAKqN,gBAEP,MADA/X,EAAO8X,QAAQxN,IAAI,WAAYxR,GACzBkH,EAER,MAAO,CACLoM,KAAM/P,EAAWkS,SACjB/J,SACA1L,WACAuW,WAAyD,OAA7CrP,EAAO8X,QAAQpK,IAAI,sBAEnC,CAIA,GAAIhD,EAAKwN,eAEP,KAAM,CACJ9L,KAAMiL,GAAchb,EAAWqI,KAC/ByT,SAAUnY,GAId,IAAIoY,EAAcpY,EAAO8X,QAAQpK,IAAI,gBAQrC,OAJEhJ,EADE0T,GAAe,wBAAwBrX,KAAKqX,SACjCpY,EAAOwF,aAEPxF,EAAOyF,OAElB4R,IAAehb,EAAW7B,MACrB,CACL4R,KAAMiL,EACN7c,MAAO,IAAI8J,EAAcE,EAAQxE,EAAOyE,WAAYC,GACpDoT,QAAS9X,EAAO8X,SAGb,CACL1L,KAAM/P,EAAWqI,KACjBA,OACA2T,WAAYrY,EAAOwE,OACnBsT,QAAS9X,EAAO8X,QAEpB,CAsTF,IAAoB7c,EA9SZqd,EAAcC,EAPpB,OAAIlB,IAAehb,EAAW7B,MACrB,CACL4R,KAAMiL,EACN7c,MAAOwF,GA8Sb,SAAwB/E,GACtB,IAAIud,EAAWvd,EACf,OAAOud,GAAgC,iBAAbA,GAAkD,iBAAlBA,EAAS9T,MAAmD,mBAAvB8T,EAAS3J,WAAuD,mBAApB2J,EAASlH,QAAyD,mBAAzBkH,EAASC,WAC/L,CA9SMC,CAAe1Y,GAEV,CACLoM,KAAM/P,EAAWmc,SACjB5J,aAAc5O,EACdqY,WAA4C,OAA/BC,EAAetY,EAAOmG,WAAgB,EAASmS,EAAa9T,OACzEsT,SAA2C,OAAhCS,EAAgBvY,EAAOmG,WAAgB,EAASoS,EAAcT,UAAY,IAAIa,QAAQ3Y,EAAOmG,KAAK2R,UAG1G,CACL1L,KAAM/P,EAAWqI,KACjBA,KAAM1E,EAEV,CAIA,SAASyL,GAAwBtT,EAASW,EAAU4S,EAAQN,GAC1D,IAAItR,EAAM3B,EAAQY,UAAU2b,GAAkB5b,IAAW8C,WACrDuK,EAAO,CACTuF,UAEF,GAAIN,GAAcpB,GAAiBoB,EAAWhG,YAAa,CACzD,IAAI,WACFA,EAAU,YACVE,GACE8F,EAIJjF,EAAKkG,OAASjH,EAAWqP,cACL,qBAAhBnP,GACFa,EAAK2R,QAAU,IAAIa,QAAQ,CACzB,eAAgBrT,IAElBa,EAAKiO,KAAOrR,KAAKC,UAAUoI,EAAW5F,OACb,eAAhBF,EAETa,EAAKiO,KAAOhJ,EAAW3F,KACE,sCAAhBH,GAAuD8F,EAAW7F,SAE3EY,EAAKiO,KAAOa,GAA8B7J,EAAW7F,UAGrDY,EAAKiO,KAAOhJ,EAAW7F,QAE3B,CACA,OAAO,IAAIwH,QAAQjT,EAAKqM,EAC1B,CACA,SAAS8O,GAA8B1P,GACrC,IAAI+O,EAAe,IAAIM,gBACvB,IAAK,IAAK3d,EAAKgE,KAAUsK,EAASwL,UAEhCuD,EAAaa,OAAOle,EAAsB,iBAAVgE,EAAqBA,EAAQA,EAAMP,MAErE,OAAO4Z,CACT,CACA,SAASY,GAA8BZ,GACrC,IAAI/O,EAAW,IAAIoP,SACnB,IAAK,IAAK1d,EAAKgE,KAAUqZ,EAAavD,UACpCxL,EAAS4P,OAAOle,EAAKgE,GAEvB,OAAOsK,CACT,CAuEA,SAASoJ,GAAkBlW,EAAO+F,EAAS2O,EAAee,EAAS3C,EAAc6B,EAAsBgB,EAAgB9E,GACrH,IAAI,WACFlB,EAAU,OACVE,GAzEJ,SAAgC9J,EAAS2O,EAAee,EAAS3C,EAAcjC,GAE7E,IAEI+O,EAFAjQ,EAAa,CAAC,EACdE,EAAS,KAETsQ,GAAa,EACbC,EAAgB,CAAC,EAyDrB,OAvDA3K,EAAQ/O,SAAQ,CAACa,EAAQzH,KACvB,IAAIyE,EAAKmQ,EAAc5U,GAAOuE,MAAME,GAEpC,GADA3D,GAAWkT,GAAiBvM,GAAS,uDACjCyM,GAAczM,GAAS,CAGzB,IAAI0M,EAAgBf,GAAoBnN,EAASxB,GAC7CxC,EAAQwF,EAAOxF,MAIf+Q,IACF/Q,EAAQ/D,OAAO2e,OAAO7J,GAAc,GACpCA,OAAejO,GAEjBgL,EAASA,GAAU,CAAC,EAEkB,MAAlCA,EAAOoE,EAAc5P,MAAME,MAC7BsL,EAAOoE,EAAc5P,MAAME,IAAMxC,GAGnC4N,EAAWpL,QAAMM,EAGZsb,IACHA,GAAa,EACbP,EAAazT,EAAqB5E,EAAOxF,OAASwF,EAAOxF,MAAMgK,OAAS,KAEtExE,EAAO8X,UACTe,EAAc7b,GAAMgD,EAAO8X,QAE/B,MACMlL,GAAiB5M,IACnBsJ,EAAgBgB,IAAItN,EAAIgD,EAAO4O,cAC/BxG,EAAWpL,GAAMgD,EAAO4O,aAAalK,MAErC0D,EAAWpL,GAAMgD,EAAO0E,KAID,MAArB1E,EAAOqY,YAA4C,MAAtBrY,EAAOqY,YAAuBO,IAC7DP,EAAarY,EAAOqY,YAElBrY,EAAO8X,UACTe,EAAc7b,GAAMgD,EAAO8X,QAE/B,IAKEvM,IACFjD,EAASiD,EACTnD,EAAW3R,OAAOyT,KAAKqB,GAAc,SAAMjO,GAEtC,CACL8K,aACAE,SACA+P,WAAYA,GAAc,IAC1BQ,gBAEJ,CAKMC,CAAuBta,EAAS2O,EAAee,EAAS3C,EAAcjC,GAE1E,IAAK,IAAI/Q,EAAQ,EAAGA,EAAQ6U,EAAqBrW,OAAQwB,IAAS,CAChE,IAAI,IACFtB,EAAG,MACHoK,EAAK,WACL0M,GACEX,EAAqB7U,GACzBc,OAA6BiE,IAAnB8Q,QAA0D9Q,IAA1B8Q,EAAe7V,GAAsB,6CAC/E,IAAIyH,EAASoO,EAAe7V,GAE5B,IAAIwV,IAAcA,EAAWrC,OAAOQ,QAG7B,GAAIO,GAAczM,GAAS,CAChC,IAAI0M,EAAgBf,GAAoBlT,EAAM+F,QAAkB,MAAT6C,OAAgB,EAASA,EAAMvE,MAAME,IACtFsL,GAAUA,EAAOoE,EAAc5P,MAAME,MACzCsL,EAAS9R,EAAS,CAAC,EAAG8R,EAAQ,CAC5B,CAACoE,EAAc5P,MAAME,IAAKgD,EAAOxF,SAGrC/B,EAAM8P,SAAS+F,OAAOrX,EACxB,MAAO,GAAIsV,GAAiBvM,GAG1B3G,GAAU,EAAO,gDACZ,GAAIuT,GAAiB5M,GAG1B3G,GAAU,EAAO,uCACZ,CACL,IAAI6W,EAAcC,GAAenQ,EAAO0E,MACxCjM,EAAM8P,SAAS+B,IAAIrT,EAAKiZ,EAC1B,CACF,CACA,MAAO,CACL9H,aACAE,SAEJ,CACA,SAAS6B,GAAgB/B,EAAY2Q,EAAeva,EAAS8J,GAC3D,IAAI0Q,EAAmBxiB,EAAS,CAAC,EAAGuiB,GACpC,IAAK,IAAI1X,KAAS7C,EAAS,CACzB,IAAIxB,EAAKqE,EAAMvE,MAAME,GAUrB,GATI+b,EAAc5hB,eAAe6F,QACLM,IAAtByb,EAAc/b,KAChBgc,EAAiBhc,GAAM+b,EAAc/b,SAEXM,IAAnB8K,EAAWpL,IAAqBqE,EAAMvE,MAAMgL,SAGrDkR,EAAiBhc,GAAMoL,EAAWpL,IAEhCsL,GAAUA,EAAOnR,eAAe6F,GAElC,KAEJ,CACA,OAAOgc,CACT,CAIA,SAASrN,GAAoBnN,EAAS8N,GAEpC,OADsBA,EAAU9N,EAAQP,MAAM,EAAGO,EAAQkX,WAAU9N,GAAKA,EAAE9K,MAAME,KAAOsP,IAAW,GAAK,IAAI9N,IACpFya,UAAUC,MAAKtR,IAAkC,IAA7BA,EAAE9K,MAAMkJ,oBAA8BxH,EAAQ,EAC3F,CACA,SAASgJ,GAAuB/K,GAE9B,IAAIK,EAAQL,EAAOyc,MAAK/F,GAAKA,EAAE5a,QAAU4a,EAAEnX,MAAmB,MAAXmX,EAAEnX,QAAiB,CACpEgB,GAAI,wBAEN,MAAO,CACLwB,QAAS,CAAC,CACR+C,OAAQ,CAAC,EACTxH,SAAU,GACVyH,aAAc,GACd1E,UAEFA,QAEJ,CACA,SAASyK,GAAuB/C,EAAQ2U,GACtC,IAAI,SACFpf,EAAQ,QACRuS,EAAO,OACPD,EAAM,KACND,QACa,IAAX+M,EAAoB,CAAC,EAAIA,EACzB1U,EAAa,uBACb2U,EAAe,kCAwBnB,OAvBe,MAAX5U,GACFC,EAAa,cACT4H,GAAUtS,GAAYuS,EACxB8M,EAAe,cAAgB/M,EAAS,gBAAmBtS,EAA5C,+CAAgHuS,EAAhH,+CACG,iBAATF,EACTgN,EAAe,sCACG,iBAAThN,IACTgN,EAAe,qCAEG,MAAX5U,GACTC,EAAa,YACb2U,EAAe,UAAa9M,EAAU,yBAA6BvS,EAAW,KAC1D,MAAXyK,GACTC,EAAa,YACb2U,EAAe,yBAA4Brf,EAAW,KAClC,MAAXyK,IACTC,EAAa,qBACT4H,GAAUtS,GAAYuS,EACxB8M,EAAe,cAAgB/M,EAAOoI,cAAgB,gBAAmB1a,EAA1D,gDAA+HuS,EAA/H,+CACND,IACT+M,EAAe,2BAA8B/M,EAAOoI,cAAgB,MAGjE,IAAInQ,EAAcE,GAAU,IAAKC,EAAY,IAAI/K,MAAM0f,IAAe,EAC/E,CAEA,SAAS5K,GAAaN,GACpB,IAAK,IAAIrX,EAAIqX,EAAQnX,OAAS,EAAGF,GAAK,EAAGA,IAAK,CAC5C,IAAImJ,EAASkO,EAAQrX,GACrB,GAAI0V,GAAiBvM,GACnB,MAAO,CACLA,SACAtH,IAAK7B,EAGX,CACF,CACA,SAAS6d,GAAkB1Y,GAEzB,OAAO5C,EAAW5C,EAAS,CAAC,EADK,iBAATwF,EAAoBP,EAAUO,GAAQA,EACnB,CACzC/B,KAAM,KAEV,CAmBA,SAAS2S,GAAiB5M,GACxB,OAAOA,EAAOoM,OAAS/P,EAAWmc,QACpC,CACA,SAAS/L,GAAczM,GACrB,OAAOA,EAAOoM,OAAS/P,EAAW7B,KACpC,CACA,SAAS+R,GAAiBvM,GACxB,OAAQA,GAAUA,EAAOoM,QAAU/P,EAAWkS,QAChD,CAsBA,SAASvE,GAAiBqC,GACxB,OAAOvH,EAAqB+I,IAAIxB,EAAO7J,cACzC,CACAgI,eAAesF,GAAuBJ,EAAgBvC,EAAee,EAASmL,EAASlF,EAAWyB,GAChG,IAAK,IAAIrd,EAAQ,EAAGA,EAAQ2V,EAAQnX,OAAQwB,IAAS,CACnD,IAAIyH,EAASkO,EAAQ3V,GACjB8I,EAAQ8L,EAAc5U,GAI1B,IAAK8I,EACH,SAEF,IAAIwU,EAAenG,EAAewJ,MAAKtR,GAAKA,EAAE9K,MAAME,KAAOqE,EAAMvE,MAAME,KACnEsc,EAAuC,MAAhBzD,IAAyBU,GAAmBV,EAAcxU,SAAuE/D,KAA5DsY,GAAqBA,EAAkBvU,EAAMvE,MAAME,KACnJ,GAAI4P,GAAiB5M,KAAYmU,GAAamF,GAAuB,CAInE,IAAI5N,EAAS2N,EAAQ9gB,GACrBc,EAAUqS,EAAQ,0EACZ2H,GAAoBrT,EAAQ0L,EAAQyI,GAAWoF,MAAKvZ,IACpDA,IACFkO,EAAQ3V,GAASyH,GAAUkO,EAAQ3V,GACrC,GAEJ,CACF,CACF,CACAiS,eAAe6I,GAAoBrT,EAAQ0L,EAAQ8N,GAKjD,QAJe,IAAXA,IACFA,GAAS,UAESxZ,EAAO4O,aAAa6J,YAAY/M,GACpD,CAGA,GAAI8N,EACF,IACE,MAAO,CACLpN,KAAM/P,EAAWqI,KACjBA,KAAM1E,EAAO4O,aAAa6K,cAE9B,CAAE,MAAOle,GAEP,MAAO,CACL6Q,KAAM/P,EAAW7B,MACjBA,MAAOe,EAEX,CAEF,MAAO,CACL6Q,KAAM/P,EAAWqI,KACjBA,KAAM1E,EAAO4O,aAAalK,KAjB5B,CAmBF,CACA,SAASuP,GAAmBja,GAC1B,OAAO,IAAI4a,gBAAgB5a,GAAQ0f,OAAO,SAAS/Y,MAAKgZ,GAAW,KAANA,GAC/D,CAiBA,SAAS3N,GAAexN,EAAS1F,GAC/B,IAAIkB,EAA6B,iBAAblB,EAAwB2C,EAAU3C,GAAUkB,OAASlB,EAASkB,OAClF,GAAIwE,EAAQA,EAAQzH,OAAS,GAAG+F,MAAMvE,OAAS0b,GAAmBja,GAAU,IAE1E,OAAOwE,EAAQA,EAAQzH,OAAS,GAIlC,IAAI6iB,EAAc3W,EAA2BzE,GAC7C,OAAOob,EAAYA,EAAY7iB,OAAS,EAC1C,CACA,SAASmW,GAA4BlF,GACnC,IAAI,WACF5C,EAAU,WACVC,EAAU,YACVC,EAAW,KACXG,EAAI,SACJF,EAAQ,KACRC,GACEwC,EACJ,GAAK5C,GAAeC,GAAeC,EAGnC,OAAY,MAARG,EACK,CACLL,aACAC,aACAC,cACAC,cAAUjI,EACVkI,UAAMlI,EACNmI,QAEmB,MAAZF,EACF,CACLH,aACAC,aACAC,cACAC,WACAC,UAAMlI,EACNmI,UAAMnI,QAEUA,IAATkI,EACF,CACLJ,aACAC,aACAC,cACAC,cAAUjI,EACVkI,OACAC,UAAMnI,QAPH,CAUT,CACA,SAASwP,GAAqBhU,EAAUsS,GACtC,OAAIA,EACe,CACf3S,MAAO,UACPK,WACAsM,WAAYgG,EAAWhG,WACvBC,WAAY+F,EAAW/F,WACvBC,YAAa8F,EAAW9F,YACxBC,SAAU6F,EAAW7F,SACrBC,KAAM4F,EAAW5F,KACjBC,KAAM2F,EAAW3F,MAIF,CACfhN,MAAO,UACPK,WACAsM,gBAAY9H,EACZ+H,gBAAY/H,EACZgI,iBAAahI,EACbiI,cAAUjI,EACVkI,UAAMlI,EACNmI,UAAMnI,EAIZ,CAcA,SAASsQ,GAAkBxC,EAAY1G,GACrC,OAAI0G,EACY,CACZ3S,MAAO,UACP2M,WAAYgG,EAAWhG,WACvBC,WAAY+F,EAAW/F,WACvBC,YAAa8F,EAAW9F,YACxBC,SAAU6F,EAAW7F,SACrBC,KAAM4F,EAAW5F,KACjBC,KAAM2F,EAAW3F,KACjBf,OACA,6BAA6B,GAIjB,CACZjM,MAAO,UACP2M,gBAAY9H,EACZ+H,gBAAY/H,EACZgI,iBAAahI,EACbiI,cAAUjI,EACVkI,UAAMlI,EACNmI,UAAMnI,EACNoH,OACA,6BAA6B,EAInC,CAeA,SAASyL,GAAezL,GAYtB,MAXc,CACZjM,MAAO,OACP2M,gBAAY9H,EACZ+H,gBAAY/H,EACZgI,iBAAahI,EACbiI,cAAUjI,EACVkI,UAAMlI,EACNmI,UAAMnI,EACNoH,OACA,6BAA6B,EAGjC,CAl6C+BmV,OAAO,wBCz/EzB,SAAS5L,EAAEnQ,EAAEC,GAAG,IAAI+b,EAAEhc,EAAE/G,OAAO+G,EAAE5D,KAAK6D,GAAGD,EAAE,KAAK,EAAEgc,GAAG,CAAC,IAAIC,EAAED,EAAE,IAAI,EAAEve,EAAEuC,EAAEic,GAAG,KAAG,EAAEC,EAAEze,EAAEwC,IAA0B,MAAMD,EAA7BA,EAAEic,GAAGhc,EAAED,EAAEgc,GAAGve,EAAEue,EAAEC,CAAc,CAAC,CAAC,SAASE,EAAEnc,GAAG,OAAO,IAAIA,EAAE/G,OAAO,KAAK+G,EAAE,EAAE,CAAC,SAASuM,EAAEvM,GAAG,GAAG,IAAIA,EAAE/G,OAAO,OAAO,KAAK,IAAIgH,EAAED,EAAE,GAAGgc,EAAEhc,EAAEgG,MAAM,GAAGgW,IAAI/b,EAAE,CAACD,EAAE,GAAGgc,EAAEhc,EAAE,IAAI,IAAIic,EAAE,EAAExe,EAAEuC,EAAE/G,OAAOmjB,EAAE3e,IAAI,EAAEwe,EAAEG,GAAG,CAAC,IAAItS,EAAE,GAAGmS,EAAE,GAAG,EAAEI,EAAErc,EAAE8J,GAAG9M,EAAE8M,EAAE,EAAEwS,EAAEtc,EAAEhD,GAAG,GAAG,EAAEkf,EAAEG,EAAEL,GAAGhf,EAAES,GAAG,EAAEye,EAAEI,EAAED,IAAIrc,EAAEic,GAAGK,EAAEtc,EAAEhD,GAAGgf,EAAEC,EAAEjf,IAAIgD,EAAEic,GAAGI,EAAErc,EAAE8J,GAAGkS,EAAEC,EAAEnS,OAAQ,MAAG9M,EAAES,GAAG,EAAEye,EAAEI,EAAEN,IAA0B,MAAMhc,EAA7BA,EAAEic,GAAGK,EAAEtc,EAAEhD,GAAGgf,EAAEC,EAAEjf,CAAagD,CAAC,CAAC,CAAC,OAAOC,CAAC,CAC3c,SAASic,EAAElc,EAAEC,GAAG,IAAI+b,EAAEhc,EAAEuc,UAAUtc,EAAEsc,UAAU,OAAO,IAAIP,EAAEA,EAAEhc,EAAEd,GAAGe,EAAEf,EAAE,CAAC,GAAG,iBAAkBsd,aAAa,mBAAoBA,YAAYC,IAAI,CAAC,IAAIC,EAAEF,YAAYG,EAAQC,aAAa,WAAW,OAAOF,EAAED,KAAK,CAAC,KAAK,CAAC,IAAII,EAAEC,KAAKC,EAAEF,EAAEJ,MAAME,EAAQC,aAAa,WAAW,OAAOC,EAAEJ,MAAMM,CAAC,CAAC,CAAC,IAAI1H,EAAE,GAAG2H,EAAE,GAAGC,EAAE,EAAEpB,EAAE,KAAKlI,EAAE,EAAEuJ,GAAE,EAAGC,GAAE,EAAGC,GAAE,EAAGC,EAAE,mBAAoBC,WAAWA,WAAW,KAAKC,EAAE,mBAAoBC,aAAaA,aAAa,KAAKC,EAAE,oBAAqBC,aAAaA,aAAa,KACnT,SAASC,EAAE3d,GAAG,IAAI,IAAIC,EAAEkc,EAAEa,GAAG,OAAO/c,GAAG,CAAC,GAAG,OAAOA,EAAE2d,SAASrR,EAAEyQ,OAAQ,MAAG/c,EAAE4d,WAAW7d,GAAgD,MAA9CuM,EAAEyQ,GAAG/c,EAAEsc,UAAUtc,EAAE6d,eAAe3N,EAAEkF,EAAEpV,EAAa,CAACA,EAAEkc,EAAEa,EAAE,CAAC,CAAC,SAASe,EAAE/d,GAAa,GAAVod,GAAE,EAAGO,EAAE3d,IAAOmd,EAAE,GAAG,OAAOhB,EAAE9G,GAAG8H,GAAE,EAAGa,EAAEC,OAAO,CAAC,IAAIhe,EAAEkc,EAAEa,GAAG,OAAO/c,GAAGie,EAAEH,EAAE9d,EAAE4d,UAAU7d,EAAE,CAAC,CACra,SAASie,EAAEje,EAAEC,GAAGkd,GAAE,EAAGC,IAAIA,GAAE,EAAGG,EAAEY,GAAGA,GAAG,GAAGjB,GAAE,EAAG,IAAIlB,EAAErI,EAAE,IAAS,IAALgK,EAAE1d,GAAO4b,EAAEM,EAAE9G,GAAG,OAAOwG,MAAMA,EAAEiC,eAAe7d,IAAID,IAAIoe,MAAM,CAAC,IAAInC,EAAEJ,EAAE+B,SAAS,GAAG,mBAAoB3B,EAAE,CAACJ,EAAE+B,SAAS,KAAKjK,EAAEkI,EAAEwC,cAAc,IAAI5gB,EAAEwe,EAAEJ,EAAEiC,gBAAgB7d,GAAGA,EAAE0c,EAAQC,eAAe,mBAAoBnf,EAAEoe,EAAE+B,SAASngB,EAAEoe,IAAIM,EAAE9G,IAAI9I,EAAE8I,GAAGsI,EAAE1d,EAAE,MAAMsM,EAAE8I,GAAGwG,EAAEM,EAAE9G,EAAE,CAAC,GAAG,OAAOwG,EAAE,IAAIO,GAAE,MAAO,CAAC,IAAItS,EAAEqS,EAAEa,GAAG,OAAOlT,GAAGoU,EAAEH,EAAEjU,EAAE+T,UAAU5d,GAAGmc,GAAE,CAAE,CAAC,OAAOA,CAAC,CAAC,QAAQP,EAAE,KAAKlI,EAAEqI,EAAEkB,GAAE,CAAE,CAAC,CAD1a,oBAAqBoB,gBAAW,IAASA,UAAUC,iBAAY,IAASD,UAAUC,WAAWC,gBAAgBF,UAAUC,WAAWC,eAAe3lB,KAAKylB,UAAUC,YAC2Q,IACzPE,EAD6PC,GAAE,EAAGC,EAAE,KAAKR,GAAG,EAAES,EAAE,EAAEC,GAAG,EACvc,SAAST,IAAI,QAAOzB,EAAQC,eAAeiC,EAAED,EAAO,CAAC,SAASE,IAAI,GAAG,OAAOH,EAAE,CAAC,IAAI3e,EAAE2c,EAAQC,eAAeiC,EAAE7e,EAAE,IAAIC,GAAE,EAAG,IAAIA,EAAE0e,GAAE,EAAG3e,EAAE,CAAC,QAAQC,EAAEwe,KAAKC,GAAE,EAAGC,EAAE,KAAK,CAAC,MAAMD,GAAE,CAAE,CAAO,GAAG,mBAAoBjB,EAAEgB,EAAE,WAAWhB,EAAEqB,EAAE,OAAO,GAAG,oBAAqBC,eAAe,CAAC,IAAIC,EAAE,IAAID,eAAeE,EAAED,EAAEE,MAAMF,EAAEG,MAAMC,UAAUN,EAAEL,EAAE,WAAWQ,EAAEI,YAAY,KAAK,CAAC,MAAMZ,EAAE,WAAWpB,EAAEyB,EAAE,EAAE,EAAE,SAASd,EAAEhe,GAAG2e,EAAE3e,EAAE0e,IAAIA,GAAE,EAAGD,IAAI,CAAC,SAASP,EAAEle,EAAEC,GAAGke,EAAEd,GAAE,WAAWrd,EAAE2c,EAAQC,eAAe,GAAE3c,EAAE,CAC5d0c,EAAQ2C,sBAAsB,EAAE3C,EAAQ4C,2BAA2B,EAAE5C,EAAQ6C,qBAAqB,EAAE7C,EAAQ8C,wBAAwB,EAAE9C,EAAQ+C,mBAAmB,KAAK/C,EAAQgD,8BAA8B,EAAEhD,EAAQiD,wBAAwB,SAAS5f,GAAGA,EAAE4d,SAAS,IAAI,EAAEjB,EAAQkD,2BAA2B,WAAW1C,GAAGD,IAAIC,GAAE,EAAGa,EAAEC,GAAG,EAC1UtB,EAAQmD,wBAAwB,SAAS9f,GAAG,EAAEA,GAAG,IAAIA,EAAEzC,QAAQb,MAAM,mHAAmHkiB,EAAE,EAAE5e,EAAEpC,KAAKmiB,MAAM,IAAI/f,GAAG,CAAC,EAAE2c,EAAQqD,iCAAiC,WAAW,OAAOrM,CAAC,EAAEgJ,EAAQsD,8BAA8B,WAAW,OAAO9D,EAAE9G,EAAE,EAAEsH,EAAQuD,cAAc,SAASlgB,GAAG,OAAO2T,GAAG,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI1T,EAAE,EAAE,MAAM,QAAQA,EAAE0T,EAAE,IAAIqI,EAAErI,EAAEA,EAAE1T,EAAE,IAAI,OAAOD,GAAG,CAAC,QAAQ2T,EAAEqI,CAAC,CAAC,EAAEW,EAAQwD,wBAAwB,WAAW,EAC9fxD,EAAQyD,sBAAsB,WAAW,EAAEzD,EAAQ0D,yBAAyB,SAASrgB,EAAEC,GAAG,OAAOD,GAAG,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,QAAQA,EAAE,EAAE,IAAIgc,EAAErI,EAAEA,EAAE3T,EAAE,IAAI,OAAOC,GAAG,CAAC,QAAQ0T,EAAEqI,CAAC,CAAC,EAChMW,EAAQ2D,0BAA0B,SAAStgB,EAAEC,EAAE+b,GAAG,IAAIC,EAAEU,EAAQC,eAA8F,OAAtCZ,EAAzC,iBAAkBA,GAAG,OAAOA,GAAe,iBAAZA,EAAEA,EAAEuE,QAA6B,EAAEvE,EAAEC,EAAED,EAAOC,EAASjc,GAAG,KAAK,EAAE,IAAIvC,GAAG,EAAE,MAAM,KAAK,EAAEA,EAAE,IAAI,MAAM,KAAK,EAAEA,EAAE,WAAW,MAAM,KAAK,EAAEA,EAAE,IAAI,MAAM,QAAQA,EAAE,IAAmN,OAAzMuC,EAAE,CAACd,GAAG+d,IAAIW,SAAS3d,EAAEoe,cAAcre,EAAE6d,UAAU7B,EAAE8B,eAAvDrgB,EAAEue,EAAEve,EAAoE8e,WAAW,GAAGP,EAAEC,GAAGjc,EAAEuc,UAAUP,EAAE7L,EAAE6M,EAAEhd,GAAG,OAAOmc,EAAE9G,IAAIrV,IAAImc,EAAEa,KAAKI,GAAGG,EAAEY,GAAGA,GAAG,GAAGf,GAAE,EAAGc,EAAEH,EAAE/B,EAAEC,MAAMjc,EAAEuc,UAAU9e,EAAE0S,EAAEkF,EAAErV,GAAGmd,GAAGD,IAAIC,GAAE,EAAGa,EAAEC,KAAYje,CAAC,EACne2c,EAAQ6D,qBAAqBpC,EAAEzB,EAAQ8D,sBAAsB,SAASzgB,GAAG,IAAIC,EAAE0T,EAAE,OAAO,WAAW,IAAIqI,EAAErI,EAAEA,EAAE1T,EAAE,IAAI,OAAOD,EAAEzG,MAAMC,KAAKR,UAAU,CAAC,QAAQ2a,EAAEqI,CAAC,CAAC,CAAC,iBCf7J0E,EAAO/D,QAAU,EAAjB","sources":["webpack://reporaiola/./node_modules/@remix-run/router/dist/router.js","webpack://reporaiola/./node_modules/scheduler/cjs/scheduler.production.min.js","webpack://reporaiola/./node_modules/scheduler/index.js"],"sourcesContent":["/**\n * @remix-run/router v1.7.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nclass ErrorResponse {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_normalizeFormMethod: false,\n    v7_prependBasename: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized =\n  // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(m => m.route.lazy) && (\n  // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(m => m.route.loader) || init.hydrationData != null);\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }));\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }));\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher = getSubmittingFetcher(submission, existingFetcher);\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        let loadingFetcher = getLoadingFetcher(submission);\n        state.fetchers.set(key, loadingFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return startRedirectNavigation(state, actionResult, {\n          submission,\n          isFetchActionRedirect: true\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n      }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher = getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined);\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        let doneFetcher = getDoneFetcher(undefined);\n        state.fetchers.set(key, doneFetcher);\n        updateState({\n          fetchers: new Map(state.fetchers)\n        });\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    let doneFetcher = getDoneFetcher(result.data);\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp) {\n    let {\n      submission,\n      replace,\n      isFetchActionRedirect\n    } = _temp === void 0 ? {} : _temp;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n    _extends({\n      _isRedirect: true\n    }, isFetchActionRedirect ? {\n      _isFetchActionRedirect: true\n    } : {}));\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    // Check if this an absolute external redirect that goes to a new origin\n    if (ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename = stripBasename(url.pathname, basename) == null;\n      if (routerWindow.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let activeSubmission = submission || getSubmissionFromNavigation(state.navigation);\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else if (isFetchActionRedirect) {\n      // For a fetch action redirect, we kick off a new loading navigation\n      // without the fetcher submission, but we send it along for shouldRevalidate\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: getLoadingNavigation(redirectLocation),\n        fetcherSubmission: activeSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a submission, we will preserve it through the redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, activeSubmission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => createUseMatchesMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp2) {\n    let {\n      requestContext\n    } = _temp2 === void 0 ? {} : _temp2;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp3) {\n    let {\n      routeId,\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId != null && relative !== \"path\") {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route.  When using relative:path,\n    // fromRouteId is ignored since that is always relative to the current\n    // location path\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getPathContributingMatches(contextualMatches).map(m => m.pathnameBase), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(m => m.route.id === f.routeId)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([runHandler(handler), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp4) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp4 === void 0 ? {} : _temp4;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n      \" _hasFetcherDoneAnything \": true\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n      \" _hasFetcherDoneAnything \": true\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n    \" _hasFetcherDoneAnything \": true\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n    \" _hasFetcherDoneAnything \": true\n  };\n  return fetcher;\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n"],"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","Action","PopStateEventType","createBrowserHistory","options","getLocation","createHref","validateLocation","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","index","getIndex","state","idx","handlePop","nextIndex","delta","location","createURL","to","base","origin","href","createPath","invariant","URL","replaceState","listen","fn","Error","addEventListener","removeEventListener","encodeLocation","url","pathname","search","hash","push","Push","createLocation","historyState","getHistoryState","pushState","error","DOMException","name","replace","Replace","go","n","getUrlBasedHistory","usr","value","message","warning","cond","console","warn","e","current","parsePath","Math","random","toString","substr","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","slice","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","toPathname","routePathnameIndex","toSegments","shift","fromPathname","pop","resolvePathname","normalizeSearch","normalizeHash","resolvePath","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","ErrorResponse","constructor","status","statusText","data","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","createRouter","init","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","dataRoutes","future","v7_normalizeFormMethod","v7_prependBasename","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","lazy","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","subscriber","completeNavigation","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","size","k","set","getSavedScrollPosition","async","startNavigation","opts","abort","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","routesToUse","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","submission","AbortController","pendingActionData","pendingError","request","createClientSideRequest","signal","findNearestBoundary","actionOutput","interruptActiveLoads","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","aborted","shortCircuited","type","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","getLoadingNavigation","Request","fetcherSubmission","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","fetcher","get","revalidatingFetcher","getLoadingFetcher","has","abortFetcher","controller","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","delete","redirect","findRedirect","fetcherKey","add","processLoaderData","deferredData","subscribe","done","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","_temp","isFetchActionRedirect","revalidate","redirectLocation","_isFetchActionRedirect","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","Promise","all","resolveDeferredResults","setFetcherError","deleteFetcher","markFetchersDone","doneFetcher","getDoneFetcher","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref2","currentLocation","nextLocation","entries","Array","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","cancel","handle","createUseMatchesMatch","y","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","userReplace","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","r","handleFetcherAction","resolveDeferredData","handleFetcherLoader","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","body","isSubmissionNavigation","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","acc","_ref3","String","parse","convertFormDataToSearchParams","convertSearchParamsToFormData","append","values","currentUrl","nextUrl","boundaryId","navigationMatches","boundaryMatches","findIndex","getLoaderMatchesUntilBoundary","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","reject","abortPromise","race","context","requestContext","headers","isStaticRequest","protocol","isSameBasename","isRouteRequest","response","contentType","statusCode","_result$init","_result$init2","deferred","resolveData","isDeferredData","Headers","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","_temp4","errorMessage","signals","isRevalidatingLoader","then","unwrap","unwrappedData","getAll","v","pathMatches","Symbol","c","d","g","h","w","C","x","sortIndex","performance","now","l","exports","unstable_now","p","Date","q","t","u","z","A","B","D","setTimeout","E","clearTimeout","F","setImmediate","G","callback","startTime","expirationTime","H","I","J","K","L","M","priorityLevel","navigator","scheduling","isInputPending","S","N","O","P","Q","R","MessageChannel","T","U","port2","port1","onmessage","postMessage","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_Profiling","unstable_UserBlockingPriority","unstable_cancelCallback","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getCurrentPriorityLevel","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_requestPaint","unstable_runWithPriority","unstable_scheduleCallback","delay","unstable_shouldYield","unstable_wrapCallback","module"],"sourceRoot":""}